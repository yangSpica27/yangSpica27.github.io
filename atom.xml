<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yangspica27.github.io/</id>
    <title>Spica 27&apos;S Room</title>
    <updated>2020-06-24T09:22:42.920Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yangspica27.github.io/"/>
    <link rel="self" href="https://yangspica27.github.io/atom.xml"/>
    <subtitle>玻璃晴朗 橘子辉煌</subtitle>
    <logo>https://yangspica27.github.io/images/avatar.png</logo>
    <icon>https://yangspica27.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Spica 27&apos;S Room</rights>
    <entry>
        <title type="html"><![CDATA[Kolin协程学习笔记 1]]></title>
        <id>https://yangspica27.github.io/post/kolin-xie-cheng-xue-xi-bi-ji/</id>
        <link href="https://yangspica27.github.io/post/kolin-xie-cheng-xue-xi-bi-ji/">
        </link>
        <updated>2020-06-24T07:51:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="kotlin的协程是什么">Kotlin的协程是什么？</h1>
<ul>
<li>
<p>Kotlin的协程在 <strong>JVM</strong>上是线程框架，但它的概念层不仅仅是线程框架</p>
</li>
<li>
<p>协程是一种在程序中的处理并发任务的方案；也是这种方案的一个组件；<br>
可以理解为一个Adapter。</p>
</li>
<li>
<p>协程和线程属于一个层级的概念，是一种不同于线程的概念，用于解决并发</p>
<ul>
<li>
<p>协程中不存在线程，也不存在并行（注意：并行和并发不是同一个概念）<br>
并行：Parallelism：导致线程安全问题，如开两个线程给两个数组进行筛选处理<br>
并发：Concurrency：如后台发请求，前端显示请求信息</p>
</li>
<li>
<p>Kotlin的协程不需要处理以上的问题，但依然存在java的线程安全问题，所有基于JVM的语言，Java，Scala，Groovy等都无法避免此问题</p>
</li>
</ul>
</li>
<li>
<p>Kotlin For Java 的协程不同于广义的协程</p>
</li>
</ul>
<h1 id="协程的写法">协程的写法</h1>
<ul>
<li>开启协程和线程写法比较<pre><code class="language-kotlin">          //开启一个协程（非常规写法）
          GlobalScope.launch {
              print(&quot;线程的名称1：${Thread.currentThread().name}&quot;)
          }
          //开启并运行一个线程
          Thread{
              print(&quot;线程的名称2：${Thread.currentThread().name}&quot;)
          }.start()
          //KTX 的线程写法：
          thread {
              print(&quot;线程的名称3：${Thread.currentThread().name}&quot;)
          }
</code></pre>
可见的是，如果仅仅是开启一个后台任务，协程并没有语法上的优势，甚至于增加了拓展函数包之后，开启线程来运行一个后台任务更加的方便，但协程的优势并不是在此，而是在其的可挂起上和线程切换上。<br>
下面的示例<code>IoCode()</code>代表一个后台任务， <code>uiCode()</code>代表一个前台任务，于是在线程上我们就要这样子做线程切换：</li>
</ul>
<pre><code class="language-kotlin">thread { 
                ioCode1()
                runOnUIThread{
                    uiCode1()
                    thread { 
                        ioCode2()
                        runOnUiThread{
                            uiCode2()
                        }
                    }
                }
            }
</code></pre>
<p>可以看见的是缺点很明显，代码可读性低，写起来烧脑，且难以维护，套娃，代码难看。业务逻辑复杂后引起回调地狱。</p>
<p>以下用协程来实现：</p>
<ol>
<li>首先指定运行的方法为挂起函数（加上关键字<code>suspend</code>），并且给他们指定运行的线程(<code>Dispatchers.IO,Dispatchers.Main</code>等)</li>
<li>将挂起函数在协程中运行</li>
</ol>
<pre><code class="language-kotlin">  //指定该函数在IO线程执行
    private suspend fun ioCode()= withContext(Dispatchers.IO){
        //业务逻辑
    }
    
    //指定该函数在ui线程执行
    private suspend fun uiCode()= withContext(Dispatchers.Main){
        //前端业务逻辑
    }
....
GlobalScope.launch { 
                ioCode()
                uiCode()
            }
            otherCode（）
            //其他函数
            
</code></pre>
<p>执行的顺序，<code>ioCode</code>执行之后，<code>uiCode</code>才会执行,协程即<code>GlobalScope.launch{}</code>内的逻辑不会阻塞后面的代码（<code>otherCode()</code>）的执行，协程会独立给予他们一个线程环境去运行，并且可以指定这个运行环境如下：</p>
<pre><code class="language-kotlin">   GlobalScope.launch(Dispatchers.Main) { 
          //该代码块内的环境为主线程
            }
    GlobalScope.launch(Dispatchers.IO) { 
          //该代码块内的环境为IO线程
     }
</code></pre>
<p>那么问题来了，如果一个方法内需要执行的逻辑需要多次切换呢？这其实也很简单</p>
<pre><code class="language-kotlin">   suspend fun  testFunc(){
        withContext(Dispatchers.IO){
            //IO线程内的操作
            func1()
        }
       withContext(Dispatchers.Main){
           //UI线程中的操作
           func2()
       }
       withContext(Dispatchers.IO){
           //IO线程内的操作
           func3()
       }
    }
     GlobalScope.launch(Dispatchers.Main) { 
          //该代码块内的环境为主线程
          testFunc()
            }
</code></pre>
<p>协程会保持的代码的时序性质，即示例代码中的<code>func1</code>，<code>func2</code>，<code>fun3</code>会依次执行，且会在我们设定的线程中运行。<br>
总结一下：<br>
1. 用lauch（）开启一段协程，并指定运行环境，通常为<code>Dispatchers.Main)</code><br>
2. 把需要后台工作的函数写成suspend挂起函数，可以在内部使用withContext或者其他挂起函数来切换线程<br>
3. 将挂起函数写在协程之中，一条线，优雅方便且读性强</p>
<h1 id="协程的天然优势性能">协程的天然优势：性能</h1>
<ul>
<li>程序什么时候需要切换线程
<ul>
<li>
<p>工作比较耗时：放在后台</p>
<ul>
<li>问题节点：如何判断该方法耗时还是不耗时？<br>
很多我们不熟悉或者同学写的看不懂（垃圾）的代码无法判断其耗时或者不耗时，但我们没有条件去逐个测试其耗时性，或者有些方法耗时不稳定，难以测试。但有了协程，就避免了这个问题，所有有耗时的函数可以全写在协程之中，就避免了所有的非UI渲染的耗时操作，且不影响可读性。</li>
<li>这使用Java基本无法实现。</li>
</ul>
</li>
<li>
<p>工作比较特殊：放在指定线程 —— 一般我们放在了主线程，如UI操作</p>
</li>
</ul>
</li>
</ul>
<h2 id="协程-for-jvm的概念">协程 For JVM的概念</h2>
<ul>
<li>线程框架</li>
<li>可以用看上去同步的代码写出异步的操作
<ul>
<li>优势1：耗时函数自动后台，从而提高性能</li>
<li>优势2：线程的“自动切回”</li>
</ul>
</li>
</ul>
<h1 id="协程和线程线程和协程安全的关系">协程和线程，线程和协程安全的关系？</h1>
<h2 id="suspend">suspend</h2>
<ul>
<li>并不是用来切线程的</li>
<li>仅仅是一个标记和提醒，这是一个挂起函数（语法层）</li>
<li></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[协程]]></title>
        <id>https://yangspica27.github.io/post/xie-cheng/</id>
        <link href="https://yangspica27.github.io/post/xie-cheng/">
        </link>
        <updated>2020-06-05T05:40:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="协程的概念">协程的概念</h2>
<p>协程——可挂起的函数的一个单例，与线程相似，</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introduce Explaining Variable（引入解释型变量）]]></title>
        <id>https://yangspica27.github.io/post/introduce-explaining-variableyin-ru-jie-shi-xing-bian-liang/</id>
        <link href="https://yangspica27.github.io/post/introduce-explaining-variableyin-ru-jie-shi-xing-bian-liang/">
        </link>
        <updated>2020-05-31T07:14:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="场景">场景：</h2>
<p>表达式非常复杂且难以阅读</p>
<h2 id="解决方案">解决方案</h2>
<p>使用临时变量将表达式分解成为容易管理的形式</p>
<h2 id="注意点">注意点</h2>
<p>如果可以使用Extract Method进行提取的时候，尽可能使用Extract Method提取，Extract Method提取之后可以全局调用，而解释型变量的使用范围有局限，如果局部变量使得Extract Method无法进行的时候才考虑引入解释型变量</p>
<h2 id="实现步骤">实现步骤</h2>
<ol>
<li>声明一个final 临时变量，将分解的表达式中的部分赋值给它</li>
<li>将表达式中的”运算结果“，替换为此临时变量</li>
<li>编译测试</li>
<li>重复，处理表达式的其他部分</li>
</ol>
<h2 id="实例代码">实例代码</h2>
<ul>
<li>原始代码</li>
</ul>
<pre><code class="language-java">doublePrice(){
    return _quantity * _itemPrice - 
        Math.max(0,_quantity - 500) * _itemPrice * 0.05 +
        Math.min(_quantity * itemPrice * 0.01,100.0);
}
</code></pre>
<ul>
<li>提取底价 数量 * 单价</li>
</ul>
<pre><code class="language-java">final double basePrice = _quantity * _itemPrice;
return basePrice -
        Math.max(0,_quantity - 500) * _itemPrice * 0.05 +
        Math.min(_quantity * itemPrice * 0.01,100.0);
</code></pre>
<ul>
<li>重复操作...</li>
</ul>
<pre><code class="language-java">final double basePrice = _quantity * _itemPrice;
final double discount = Math.max(0,_quantity - 500) * itemPrice * 0.05;
final doubel skining = Math.min(basePrice * 0.01,100.0);
return basePrice - discount + skining;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[实训总结]]></title>
        <id>https://yangspica27.github.io/post/shi-xun-zong-jie/</id>
        <link href="https://yangspica27.github.io/post/shi-xun-zong-jie/">
        </link>
        <updated>2020-05-25T12:34:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="2020525">2020/5/25</h2>
<ul>
<li>实现id的实现id的无碰撞自动赋值算法<br>
之前实现view的id赋值都是手动给的int值，程序繁琐，需要先到xml中去声明才能使用<br>
自动赋随机数之后由于id不可控，导致外部需要获取内部view时findbyid无法使用，只能从内部向外暴露View，代码可读性下降，后经思考，通过string的byte化获得一个唯一的Int来进行赋值</li>
</ul>
<pre><code class="language-kotlin">/**'将String转化成对应的Int值来充当Id**/
internal fun String.toLayoutId(): Int {
  return java.lang.String(this).bytes.sum()
}
/** 使用场景**/
  formContent.id = &quot;form_content&quot;.toLayoutId()
/** 外部View寻找子控件**/
findViewById(&quot;form_content&quot;.toLayoutId())
</code></pre>
<ul>
<li>
<p>登录页面初步的去xml化<br>
样式还未优化，仅完成布局和部分交互逻辑<br>
<img src="https://yangspica27.github.io//post-images/1590410644440.png" alt="" loading="lazy"></p>
</li>
<li>
<p>登录方式切换的时候的动画算法<br>
此步参考了@BashaChris的一篇关于视差动画文章<a href="https://medium.com/@BashaChris/the-android-viewpager-has-become-a-fairly-popular-component-among-android-apps-its-simple-6bca403b16d4">文章地址</a></p>
</li>
</ul>
<pre><code class="language-kotlin">  override fun transformPage(view: View, position: Float) {
    if (moving != null) {
      if (position &gt;= -1) {
        //页面滑动完成之后透明
        view.alpha = 0F
      } else if (position &lt;= 1) {
        //得到需要视差效果的View
        if (moving != null) {
          //获取容器View的视图宽度
          val pageWidth = view.width
          //利用页面宽度和偏移值做一个简易插值器
          moving.translationX = position * pageWidth
        } else {
          //页面滑动完成之后透明
          view.alpha = 0F
        }
      }
    }
  }
</code></pre>
<h2 id="2020526">2020/5/26</h2>
<ul>
<li>完成 点击的弹性动画的封装并在此基础上封装了有个弹性Button（SpringButton）</li>
</ul>
<pre><code class="language-kotlin">if (!this.isAnimating &amp;&amp; this.view.scaleX == 1f) {
      val animatorCompat = ViewCompat.animate(view)
        .setDuration(this.duration.toLong())
        .scaleX(this.scaleX)
        .scaleY(this.scaleY)
        .setInterpolator(CycleInterpolator(0.5f)).apply {
          setListener(object : ViewPropertyAnimatorListener {
            override fun onAnimationCancel(view: View?) = Unit
            override fun onAnimationStart(view: View?) {
              isAnimating = true
            }

            override fun onAnimationEnd(view: View?) {
              isAnimating = false
              finishListener?.onFinished()
            }
          })
        }
      this.listener?.let { animatorCompat.setListener(it) }
      if (this.view is ViewGroup) {
        for (index in 0 until this.view.childCount) {
          val nextChild = this.view.getChildAt(index)
          ViewCompat.animate(nextChild)
            .setDuration(this.duration.toLong())
            .scaleX(this.scaleX)
            .scaleY(this.scaleY)
            .setInterpolator(CycleInterpolator(0.5f))
            .withLayer()
            .start()
        }
      }
      animatorCompat.withLayer().start()
    }
</code></pre>
<ul>
<li>
<p>主页面到登录页面路由Motion动画 <a href="https://proandroiddev.com/material-design-motion-for-android-396da62edb1c">参考文章</a></p>
</li>
<li>
<p>登录部分网络请求</p>
</li>
</ul>
<pre><code class="language-kotlin">    //网络请求监听
    viewModel.newsLiveData.observe(this, Observer {
      when (it.requestStatus) {
        RequestStatus.START -&gt; {
          //网络请求开始，可以在此加入加载框
        }
        RequestStatus.SUCCESS -&gt; {
          //网络请求成功，在此处理数据
          &quot;网络请求成功:${ it.data?.toString()}&quot;.toast(this)
        }
        RequestStatus.COMPLETE -&gt; {
          //网络请求结束,可以在此加载框关闭
//          &quot;网络请求结束&quot;.toast(this)
        }
        RequestStatus.ERROR -&gt; {
          //网络请求错误
          &quot;网络出错了&quot;.toast(this)
          Log.e(&quot;请求错误:&quot;, it.error?.message.toString())
        }
      }
    })
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Replace Temp With Query（以查询代替临时变量）]]></title>
        <id>https://yangspica27.github.io/post/replace-temp-with-queryyi-cha-xun-dai-ti-lin-shi-bian-liang/</id>
        <link href="https://yangspica27.github.io/post/replace-temp-with-queryyi-cha-xun-dai-ti-lin-shi-bian-liang/">
        </link>
        <updated>2020-04-28T13:12:42.000Z</updated>
        <content type="html"><![CDATA[<p>实例：<br>
原函数：</p>
<pre><code class="language-java">    double basePrice = price * num;
    if (basePrice &gt; 1000) {
      return basePrice * 0.95;
    } else {
      return basePrice * 0.98;
    }
</code></pre>
<p>优化后</p>
<pre><code class="language-java"> double basePrice() {
    return price * num;
  }

if (basePrice() &gt; 1000) {
      return basePrice() * 0.95;
    } else {
      return basePrice() * 0.98;
    }
</code></pre>
<p>场景：<br>
临时变量的问题在于：他们是局部的，且是暂时的，只在该函数内可见。<br>
更改为查询之后可以被整个类使用。可以方便其他重构手法的使用。</p>
<p>做法：</p>
<ol>
<li>找出只被赋值一次的临时变量</li>
<li>将该临时变量声明为final</li>
<li>编译 确定该函数仅被赋值一次</li>
<li>将赋值过程封装进一个独立函数之中，且声明为私有，日后有需求后可声明为其他</li>
<li>编译测试</li>
<li>对该临时变量使用inline Temp.</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[重构手法之内联临时变量（Inline Temp）]]></title>
        <id>https://yangspica27.github.io/post/chong-gou-shou-fa-zhi-nei-lian-lin-shi-bian-liang-inline-temp/</id>
        <link href="https://yangspica27.github.io/post/chong-gou-shou-fa-zhi-nei-lian-lin-shi-bian-liang-inline-temp/">
        </link>
        <updated>2020-04-19T23:55:03.000Z</updated>
        <content type="html"><![CDATA[<p>问题场景：<br>
一个变量仅仅被赋值了一次，且妨碍了其他重构手法</p>
<p>问题代码：</p>
<pre><code class="language-java">double  basePrice = order.getPrice();
return (basePrice &gt; 1000)
</code></pre>
<p>使用场景:</p>
<ul>
<li>作为“Replace Temp With Query”手法的一部分</li>
<li>某个临时变量被某个函数返回值所赋值</li>
<li>这个临时变量影响了其他手法的使用</li>
</ul>
<p>优化代码：</p>
<pre><code class="language-java">return(order.getPrice &gt; 1000);
</code></pre>
<p>内联化流程：</p>
<ol>
<li>检查右边的返回值不会带来副作用（如返回意料以外的值）</li>
<li>尝试声明临时变量为final，确保只被赋值一次</li>
<li>找到临时变量的引用点切换为对应表达式</li>
<li>重构完之后，编译测试</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[重构手法之内联函数（InLine Method）]]></title>
        <id>https://yangspica27.github.io/post/chong-gou-shou-fa-zhi-nei-lian-han-shu-inline-method/</id>
        <link href="https://yangspica27.github.io/post/chong-gou-shou-fa-zhi-nei-lian-han-shu-inline-method/">
        </link>
        <updated>2020-04-14T11:28:39.000Z</updated>
        <content type="html"><![CDATA[<p>我们先来看一个栗子：</p>
<pre><code class="language-java">  //根据是否及格获取最后加的学分
  int getLastRating(int rate) {
    return (isQualified(rate)) ? 2 : 1;
  }
  //根据考试成绩判断是否及格
  boolean isQualified(int rate) {
    return rate &gt;= 60;
  }
</code></pre>
<p>优化之后：</p>
<pre><code class="language-java"> //根据是否及格获取最后加的学分
  int getLastRating(int rate) {
    return (rate &gt;= 60) ? 2 : 1;
  }
</code></pre>
<p>其实直接的将<code>isQualified()</code>函数引入并没有增加代码的阅读难度，这其实是一个没有必要的间接层。<br>
在我们重构代码的时候，如果提炼出来的间接层，与原函数对比，并没有提升代码的清晰度，其实就应该去掉这个间接层。<br>
使用Inline Method可以帮我们去掉很多没有必要的间接层。<br>
还有一种用法就是<br>
在处理不合理的函数群的，将他们全部内联到一个大的函数中，在进行“Replace Method with Method Object”等处理。<br>
做法：</p>
<ol>
<li>确认没有多态，内联后，子类无法重写此方法（这个方法已经不存在于父类中了）。</li>
<li>找出调用的地点</li>
<li>替换</li>
<li>编译，测试</li>
<li>删除原函数。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[重构手法之Extract Method（提炼函数）]]></title>
        <id>https://yangspica27.github.io/post/chong-gou-shou-fa-zhi-extract-methodti-lian-han-shu/</id>
        <link href="https://yangspica27.github.io/post/chong-gou-shou-fa-zhi-extract-methodti-lian-han-shu/">
        </link>
        <updated>2020-04-11T08:49:28.000Z</updated>
        <content type="html"><![CDATA[<p>提炼函数是最常用的重构手法之一。<br>
常用于以下场景：</p>
<ol>
<li>函数过长</li>
<li>逻辑过于复杂，让人无法直接理解其意图<br>
要点：</li>
<li>处理临时变量<br>
用查询代替临时变量本身<br>
太过复杂的时候，使用“Replaca Method With Method Object”</li>
<li>处理参数</li>
</ol>
<ul>
<li>
<p>不要在函数内赋值，如果这样子做了，请使用“Remove Assignments to Parameters”，逻辑清晰后，可以进一步优化算法。</p>
</li>
<li>
<p>实现方式</p>
</li>
</ul>
<ol>
<li>以该处的作用为这个新函数命名（如果想不出名字，请不要动它）</li>
<li>检查有无作用域仅存原函数的变量</li>
<li>检查有无“仅用于被提炼代码段的”临时变量，在目标函数中声明为临时变量。</li>
<li>如果代码段中有局部函数被赋值了，尝试将新函数处理为一个查询函数，在流程结束之后Return给局部变量。</li>
</ol>
<ul>
<li>修改前</li>
</ul>
<pre><code class="language-java">public static void main(String[] args) {
    BookDaoImpl bookDao = new BookDaoImpl();
    List&lt;Book&gt; books = bookDao.getAllBook();
    for (Book book : books) {
      System.out.println(&quot;输出信息:&quot;);
      System.out.println(&quot;bookName:&quot; + book.getBookName());
      System.out.println(&quot;bookNum:&quot; + book.getBookName());
    }
  }
</code></pre>
<ul>
<li>修改后</li>
</ul>
<pre><code class="language-java">public class Main {

  public static void main(String[] args) {
    BookDaoImpl bookDao = new BookDaoImpl();
    List&lt;Book&gt; books = bookDao.getAllBook();
    for (Book book : books) {
      Main main = new Main();
      main.printBookDetail(book);
    }
  }

  public void printBookDetail(Book book) {
    System.out.println(&quot;输出信息:&quot;);
    System.out.println(&quot;bookName:&quot; + book.getBookName());
    System.out.println(&quot;bookNum:&quot; + book.getBookName());
  }
}
</code></pre>
<p>有赋值的情况</p>
<ul>
<li>修改前</li>
</ul>
<pre><code class="language-java">public static void main(String[] args) {
    BookDaoImpl bookDao = new BookDaoImpl();
    List&lt;Book&gt; books = bookDao.getAllBook();
    double allPrice = 0;
    for (Book book : books) {
      allPrice += book.getPrice();
    }
  }
</code></pre>
<ul>
<li>修改后</li>
</ul>
<pre><code class="language-java">public class Main {

  public static void main(String[] args) {
    BookDaoImpl bookDao = new BookDaoImpl();
    Main main = new Main();
    double allPrice = 0;
    allPrice = main.getAllPrice(bookDao);
  }


  double getAllPrice(BookDao bookDao) {
    List&lt;Book&gt; books = bookDao.getAllBook();
    double out = 0;
    for (Book book : books) {
      out += book.getPrice();
    }
    return out;
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[重构]]></title>
        <id>https://yangspica27.github.io/post/chong-gou/</id>
        <link href="https://yangspica27.github.io/post/chong-gou/">
        </link>
        <updated>2020-04-04T02:18:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是重构">什么是重构</h2>
<ul>
<li>重构就是以微小的步伐修改程序，如果你犯下错误，便可很容易的发现它。</li>
<li>对软件内部的结构的一种调整，目的是不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。</li>
<li>使用一系列重构手法，在不改变软件的可观察行为的前提下，对其结构进行优化。</li>
<li>重构的目的是让让软件更容易被理解和修改，与之对比的是性能优化，和重构一样，性能优化通常不会改变组件的行为（除了执行速度）,只会改变其内部结构，但是两者的出发点不同，性能优化往往让代码更难理解，但为了你所需的性能你不得不那么去做。</li>
<li>重构不会改变软件的可观察行为，重构之后软件的功能一如既往。</li>
</ul>
<h2 id="重构的目的">重构的目的：</h2>
<ul>
<li>重构改进软件设计，防止长时间开发积累的脱离结构的代码导致程序腐败</li>
<li>重构使软件更加容易理解  &quot;擦掉窗户上的污垢，使其看的更远&quot;</li>
<li>重构可以帮助找到Bug</li>
<li>重构提升编程速度（良好的设计是快速开发的根本）</li>
</ul>
<p>重复的做类似的事情？事不过三，三则重构</p>
<h2 id="何时重构">何时重构：</h2>
<ul>
<li>添加功能的时候重构<br>
重构让我更加理解这段代码，重构让我弥补之前的不足，让添加新特性更加轻松。</li>
<li>修补错误的时候重构<br>
发现Bug是这段代码需要重构的信号，说明其结构不够清晰，清晰到我没能一眼看出它有bug</li>
<li>复审代码的时候重构</li>
</ul>
<h2 id="重构的原则">重构的原则：</h2>
<ul>
<li>减少不必要的间接层：<br>
如一个有着多态性的组件，但是最终其实只有一处用到了，请将这种寄生虫式的间接层去掉</li>
<li>合理的引入间接层：
<ul>
<li>间接层的好处：
<ol>
<li>允许逻辑共享</li>
<li>分开解释意图和实现</li>
<li>隔离变化</li>
<li>封装条件逻辑</li>
</ol>
</li>
<li>何时引入间接层？
<ol>
<li>找到缺乏“间接层好处的地方”，不修改其现有行为的前提下引入间接层</li>
</ol>
</li>
</ul>
</li>
<li>对比事前设计的优势：<em>小心翼翼的事前设计</em>让整个系统的完成之前就拥有了极高的质量，程序员只需要讲代码塞进整个强健的模板/骨架就可以了，但也有非常大的隐患：<strong>太容易猜错</strong>，理解上的错误会导致全盘的错误，但重构永远面临全盘出错的风险。程序从始至终都是能保持一致的。</li>
</ul>
<h2 id="重构的难题">重构的难题</h2>
<h3 id="数据库">数据库</h3>
<p>难点：程序与背后的数据库过分耦合在一起<br>
解决方法：在对象模型和数据库模型中插入一个分层。<br>
优势：虽然增加了复杂度，但是使得程序变得更加灵活，但无需一开始就引入，在对象变得不再稳定的时候再行引入即可。</p>
<h3 id="修改接口">修改接口</h3>
<p>难点：接口改变了，任何事情都可能发生：<br>
如果这个函数的（哪怕是public）所有的调用者都在你的控制下，即使您将函数名称改掉了也能获取其调用者进行修正的时候，是不存在问题的，但是这个接口是个“已经发布的接口”，我们不能在对其调用者进行修改，或者根本无法获得其调用者的情况下，这时候才是问题。<br>
解决方法：<br>
1. 发布新旧两个接口（将旧接口进行deprecated标记）<br>
缺点： 必须构造并且维护一些额外的函数，这让接口变得复杂且难以调用。<br>
2. 尽量不发布没有必要的接口<br>
3. 在throw子句之中添加自定义的异常：为这个新的函数指定名称，并在旧的函数中调用它，将这个受控异常变为非受控异常。</p>
<h2 id="难以通过重构进行改变的设计改动">难以通过重构进行改变的设计改动</h2>
<p>想象重构的情况，如果有简单的设计方式作为重构对象，可以先重构为简单的设计，及时不能覆盖全部的需求。如果没有，则需要重新在设计上花时间。</p>
<h2 id="何时不该重构">何时不该重构</h2>
<ol>
<li>代码过于混乱以至于重写更加简单时候，别犹豫，重写吧。</li>
<li>项目的末期应该避免重构，重构任务相当于债务，应该是及时写及时重构，拖得太久终会被利息（代码质量腐败）压垮。重构可以提高生产力，但如果最后没有时间进行重构，表明你早该开始重构了。</li>
</ol>
<h2 id="重构与设计">重构与设计</h2>
<ul>
<li>重构和设计互为补充
<ul>
<li>&quot;预先设计”可以减少反工的时间</li>
<li>“有了设计我们可以思考的更快，但是其中有许多小漏洞”</li>
</ul>
</li>
<li>重构的另辟蹊径：预先设计并不需要多么正确复杂仅需足够合理，在实现的过程中对问题逐渐理解加深之后，发现最佳解决方案与“预先设计”不同之时，重构让日后的修改成本不在高昂。
<ul>
<li>简化了设计成本：灵活的设计方案成本太大，因为个性的问题分布在程序的各个角落，在所有地方建立起灵活性，复杂度和可维护性难度会直接飙升。实践阶段发现有些灵活性毫无必要，是不可避免的，为了获得这种灵活性，我们在实际行动需要更多的灵活性。</li>
<li>重构的途径来解决这种风险，我们只需要思考“如何把目前简单的实现方案重构成灵活的实现方案”。</li>
</ul>
</li>
</ul>
<h3 id="劳而无获">劳而无获</h3>
<p>Ron Jeffries关于克莱斯勒综合薪资系统:<br>
“哪怕我们十分了解系统，也请实际度量它的性能，不要臆测，臆测会让你学到一些东西，但<strong>十有八九是错的</strong>。&quot;</p>
<h2 id="重构与性能">重构与性能</h2>
<ul>
<li>不赞成为了设计的纯洁性而忽视性能</li>
<li>重构使得性能优化变得更加容易，虽然重构短期内可能导致运行速度的变慢：“先写出可调的软件，再去优化其性能获取足够速度”</li>
</ul>
<h2 id="重构的起源">重构的起源</h2>
<h2 id="坏代码的味道">坏代码的“味道”</h2>
<p>“如果尿布丑了，就换掉它。”</p>
<h3 id="重复代码">重复代码</h3>
<ul>
<li>同一个类里面有相同的函数<br>
解决方案：采用“Extract Method”（一些名词后续进行解释）提炼出统一的代码，然后再原使用处进行调用。</li>
<li>互为兄弟的子类之中，有相同的表达式<br>
解决方案：对两个类进行“Extract Method”，在之后对提炼出的代码进行“Pull Up Method”,将其推入父类之内。如果仅仅是类似，运用“Extract Method”将相似部分与差异部分分隔开，构成一个单独的函数，然后运用“From Template Method”获得一个<strong>Template Method设计模式</strong>。<br>
-如果函数以不同的算法做相同的事情<br>
解决方案：选择其中较为清晰的一个，并使用“Subsitute Algorithm”将其他的函数算法替换掉</li>
<li>两个毫无相干的类中出现重复代码<br>
解决方案：考虑对其中一个类使用“Extract Class”，将重复代码提炼到一个独立类中，然后在另一个类中使用这个新类。也可以根据实际情况，确实应当属于其中一个类时，自行决定放置位置。</li>
</ul>
<h3 id="过长的函数">过长的函数</h3>
<p>原则：当我们感觉需要以注释来说明点什么的时候，我们就需要把需要说明的东西封进一个独立函数之中，并以其用途（而非实现手法）命名。<br>
函数的长度可能会增加，但语义从 如何做---&gt;做什么<br>
大部分场合，缩小函数只需要提炼出函数中适合集中的部分并成一个新的函数。</p>
<ul>
<li>函数内有大量的参数和临时变量</li>
</ul>
<ol>
<li>经常性的使用“Replace Temp With Query”来消除这些临时元素。</li>
<li>“Introduce Parameter Object”和“Preserve Whole Object”使得过长的参数变得简洁。</li>
<li>“Replace Method With Method Object”。</li>
<li>条件表达式和循环也是可提炼的信号</li>
</ol>
<h3 id="过大的类">过大的类</h3>
<p>导致原因：试图使用单个类做太多的事情<br>
解决方案：可以运用“Extract Class”将几个变量存到一个新类中去，如果变量中的词缀和词头有所重叠，尝试用“Extract SubClass”提炼到某个组件或者子类之中。<br>
小技巧：可以先确定客户端如何使用他们，之后运用“Extract interface”为每种方式提供一个接口，这可以帮助分解这个类。</p>
<h3 id="过长的参数列">过长的参数列</h3>
<p>如果可以香已存在的对象（这个对象代表另一个参数，或者class对象）发送请求就能获取到这个参数，可以使用“Replace Parameter with Method”重构，也可以将这些参数封装为一个“参数对象”，以参数对象代替过长的参数列。<br>
如果不希望对象与大对象之间发生依赖关系，那就该考虑结构是否合理了。</p>
<h3 id="发散式的变化">发散式的变化</h3>
<p>解释：某个类常常因为各种原因在不同的方向上产生不同的变化，不利于修改<br>
针对某一外界变化的所有对应的修改，都应该发生在单一类中，而这个新类的所有内容都反应这个变化。<br>
解决方案：找出特定原因下的所有变化，然后使用“Extract Class”将他们提取到另一个类中。</p>
<h3 id="发散式的修改">发散式的修改</h3>
<p>情景：遇到某种情况，都必须在许多不同的类中做小修改。这回导致代码四散在各处，导致遗漏需要修改的地方。<br>
解决方案：这种情况下，应该使用“Move Method”和“Move Fileld”将所有需要修改的代码放进同一个类<br>
<em><strong>上面两种情况目的都是为了让外界的变化和变动的类 一一对应</strong></em></p>
<h3 id="依恋情结">依恋情结</h3>
<p>情景：一个函数从另一个类中调用大量的值/一个函数用到了许多类的内容<br>
解决方案：使用“Move Method”将函数提取到它该去的地方，如果只是函数中的一部分需要这种依恋关系，可以使用“Extract Method”提炼到独立函数中，在使用“Move Method”。</p>
<h3 id="数据泥团">数据泥团</h3>
<p>删除数据项中大量数据中的其中一个，如果其他数据因此失去意义，可以考虑为他们创建一个新对象。</p>
<h3 id="primitive-obsession基本类型偏执">Primitive Obsession（基本类型偏执）</h3>
<p>尝试使用一些小对象代替传统的基本类型</p>
<h3 id="switch的惊悚现身">Switch的惊悚现身</h3>
<p>少用switch语句<br>
尝试使用多态来代替它，如果是在单一函数之中，可以使用“Replace Parameter with Explicit Method”，如果选择条件含null，试试看“Introduce Null Object”。</p>
<h3 id="平行继承体系">平行继承体系</h3>
<p>情景：某个类是另一个类的特殊情况<br>
导致的问题：你更改一个类的时候，必须也对另一个类做对应的修改<br>
如何消除：让一个继承体系的实例去引用另一个继承体系的实例</p>
<h3 id="lazy-class">Lazy Class</h3>
<p>某些子类没有做足够的工作，使用“Collapse Hierarchy”<br>
对于几乎没用的组件，使用“Inline Class”对付他们</p>
<h3 id="夸夸其谈的未来性">夸夸其谈的未来性</h3>
<p>情景：为了将来“可能需要处理”的某个事情，而用各种各样的钩子，特殊情况来处理。<br>
某个抽象类其实并没有太大作用<br>
解决方案：一刀删掉</p>
<h3 id="令人迷惑的暂时字段">令人迷惑的暂时字段</h3>
<h3 id="过度耦合的消息链">过度耦合的消息链</h3>
<h3 id="中间人">中间人</h3>
<h3 id="过于亲密的关系">过于亲密的关系</h3>
<h3 id="异曲同工的类">异曲同工的类</h3>
<h3 id="不完美的类库">不完美的类库</h3>
<h3 id="纯稚的数据类">纯稚的数据类</h3>
<h3 id="被拒绝的遗赠">被拒绝的遗赠</h3>
<h3 id="过多的注释">过多的注释</h3>
<h2 id="重新组织函数">重新组织函数</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端框架技术学习笔记(Vue篇)]]></title>
        <id>https://yangspica27.github.io/post/qian-duan-kuang-jia-ji-zhu-xue-xi-bi-ji-vue-pian/</id>
        <link href="https://yangspica27.github.io/post/qian-duan-kuang-jia-ji-zhu-xue-xi-bi-ji-vue-pian/">
        </link>
        <updated>2020-03-12T11:58:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="2020317">2020/3/17</h1>
<h2 id="vue">Vue</h2>
<ul>
<li>构建数据驱动的Web界面的js渐进式框架</li>
<li>目标：实现响应式的数据绑定的组合的识图组件</li>
<li>核心：响应式的数据绑定系统，只关注视图层</li>
<li>最适合开发单页面应用系统SAP（Single Page Application）</li>
</ul>
<h2 id="基本语法篇">基本语法篇</h2>
<h3 id="绑定">绑定</h3>
<pre><code class="language-html">&lt;div id=&quot;app&quot; v-bind:title=&quot;vueTitle&quot;&gt;
    {{message}}
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    const app = new Vue({
        el: '#app',
        data: {
            message: 'Hello Vue',
            vueTitle:'标题'
        }
    })
</code></pre>
<p>效果：<br>
<img src="https://yangspica27.github.io//post-images/1584404798612.png" alt="" loading="lazy"></p>
<ul>
<li>el：绑定控件</li>
<li>data：声明数据</li>
</ul>
<h2 id="v-if">v-if</h2>
<p>v-if 指令将根据表达式的&quot;seen&quot;值的真假来插入/移除元素</p>
<pre><code class="language-html">&lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;
</code></pre>
<h3 id="v-show">v-show</h3>
<p>根据表达式的数值动态展示隐藏元素</p>
<pre><code class="language-html">&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;
</code></pre>
<h3 id="v-for">v-for</h3>
<p>我们可以用 v-for 指令基于一个数组来渲染一个列表。v-for 指令需要使用 item in items 形式的特殊语法，其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名<br>
语法<code>v-for=&quot;(item, index) in items&quot;</code><br>
item的元素对象，index是索引</p>
<pre><code class="language-HTML">	&lt;div id=&quot;app&quot;&gt;
			&lt;ul&gt;
				&lt;li v-for=&quot;item in list&quot;&gt;
					{{item}}
				&lt;/li&gt;
			&lt;/ul&gt;
		&lt;/div&gt;
		&lt;script type=&quot;text/javascript&quot;&gt;
			const app = new Vue({
				el: &quot;#app&quot;,
				data: {
					list: [
						&quot;item1&quot;,
						&quot;item2&quot;,
						&quot;item3&quot;,
						&quot;item4&quot;
					]
				}
			})
		&lt;/script&gt;
</code></pre>
<h3 id="vue的生命周期">Vue的生命周期</h3>
<blockquote>
<p>所有的生命周期钩子自动绑定 this 上下文到实例中，因此你可以访问数据，对属性和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 created: () =&gt; this.fetchTodos())。这是因为箭头函数绑定了父上下文，因此 this 与你期待的 Vue 实例不同，this.fetchTodos 的行为未定义。</p>
</blockquote>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;{{message}}
			&lt;button v-on:click=&quot;click&quot;&gt;change&lt;/button&gt;
		&lt;/div&gt;

		&lt;script type=&quot;text/javascript&quot;&gt;
			const app = new Vue({
				el: '#app',
				data: {
					message: &quot;hello world&quot;
				},
				beforeCreate:function(){
					console.log(&quot;创建前调用&quot;)
				},
				created: function() {
					console.log('Vue对象被创建的时候调用')
				},
				beforeMount: () =&gt; {
					console.log(&quot;挂载前调用&quot;)
				},
				mounted: () =&gt; {
					console.log('Vue对象挂在到Dom对象的时候执行')
				},
				updated: () =&gt; {
					console.log('data数据更新的时候调用')
				},
				beforeDestroy: () =&gt; {
					console.log('销毁前调用')
				},
				destroyed:function(){
					console.log('销毁完成')
				},

				//钩子函数不用卸载method中
				methods: {
					click: function() {
						this.message = &quot;ok&quot;
					}
				}
			})
		
		&lt;/script&gt;
</code></pre>
<h3 id="数据的双向绑定">数据的双向绑定</h3>
<p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>,<code>&lt;textarea&gt;</code>及<code>&lt;select&gt;</code>元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>
<pre><code class="language-Html">&lt;div id=&quot;app&quot; &gt;
			{{message}}	
			&lt;button v-on:click=&quot;reverse&quot;&gt;逆转消息&lt;/button&gt;
			&lt;br /&gt;
			&lt;!-- v-model指令来表达输入事件之间的双向绑定 --&gt;
			&lt;input v-model:value=&quot;message&quot; /&gt;
		&lt;/div&gt;

	
		&lt;script type=&quot;text/javascript&quot;&gt;
			const app = new Vue({
				el: '#app',
				data: {
					message: 'Hello Vue',
				},
				//定义的函数于此
				methods: {
					reverse: function() {
						console.log(this.message)
						this.message = this.message.split('').reverse().join('')
					}
				}
			})
		&lt;/script&gt;
</code></pre>
<p>#2020/3/19</p>
<h3 id="计算属性-computed">计算属性 computed</h3>
<ul>
<li>在一个计算属性里可以完成各种复杂的逻辑，包括运算、函数调用等，只要最终返回一个结果就可以。</li>
</ul>
<pre><code class="language-html">&lt;div id=&quot;example&quot;&gt;
  &lt;p&gt;Original message: &quot;{{ message }}&quot;&lt;/p&gt;
  &lt;p&gt;Computed reversed message: &quot;{{ reversedMessage }}&quot;&lt;/p&gt;　　
&lt;/div&gt;
</code></pre>
<pre><code class="language-javascript">var vm = new Vue({
  el: '#example',
  data: {
    message: 'Hello'
  },
  computed: {
    // 计算属性的 getter
    reversedMessage: function () {
      // `this` 指向 vm 实例
      return this.message.split('').reverse().join('')
    }
  }
})
</code></pre>
<ul>
<li>计算属性还能拥有自己的Get和Set方法</li>
</ul>
<pre><code class="language-JavaScript">var vm = new Vue({
    el: '#demo',
    data: {
        firstName: 'Foo',
        lastName: 'Bar'
    },
    computed: {
        fullName: {
            // getter
            get: function () {
                return this.firstName + ' ' + this.lastName
            },
            // setter
            set: function (newValue) {
                var names = newValue.split(' ');
                this.firstName = names[0];
                this.lastName = names[names.length - 1];
            }
        }
    }
});
</code></pre>
<h3 id="侦听器-watch">侦听器 watch</h3>
<p>Watch的作用可以监控一个值的变换，并调用因为变化需要执行的方法。可以通过watch动态改变关联的状态。</p>
<pre><code class="language-JavaScript">watch: {
					enterBrand: function() {
						// 判断类型是否非法
						let obj = this.enterBrand
						if (typeof obj == &quot;undefined&quot; || obj == null || obj == &quot;&quot;) {
							this.check1 = true;
						} else {
							this.check1 = false;
						}
					}
                    }
</code></pre>
<h3 id="过滤器">过滤器</h3>
<p>过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p>
<pre><code class="language-html">&lt;!-- 在双花括号中 --&gt;
{{ message | capitalize }}

&lt;!-- 在 `v-bind` 中 --&gt;
&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;
</code></pre>
<pre><code class="language-JavaScript">filters: {
  capitalize: function (value) {
    if (!value) return ''
    value = value.toString()
    return value.charAt(0).toUpperCase() + value.slice(1)
  }
}
</code></pre>
<h1 id="2020322">2020/3/22</h1>
<h2 id="组件">组件</h2>
<p>Tips：</p>
<ul>
<li>组件默认情况下，只能去调用自己的属性和方法，不能够跨组件调用</li>
<li>子组件和父组件，不能并列使用</li>
<li>模板中有且只有一个根元素</li>
<li>组件名称一定要小写，否则无法解析</li>
</ul>
<h2 id="子组件调用父组件数据数据">子组件调用父组件数据数据</h2>
<ol>
<li>子组件发送申请</li>
</ol>
<pre><code class="language-Html">&lt;template id=&quot;t1&quot;&gt;
			&lt;div&gt;
				我是父组件，{{attr1}}
				&lt;erzi :attr1=&quot;attr1&quot;&gt;&lt;/erzi&gt;
			&lt;/div&gt;

		&lt;/template&gt;
</code></pre>
<ol start="2">
<li>定义props</li>
</ol>
<pre><code class="language-JavaScript">						components: {
							'erzi': {
								template: '#t2',
								data() {
									return {
										attr2: '我是子组件的数据'
									}
								},
								props: [&quot;attr1&quot;]
							}
						}
</code></pre>
<ol start="3">
<li>调用</li>
</ol>
<pre><code class="language-Html">&lt;template id=&quot;t2&quot;&gt;
			&lt;div&gt;我是子组件，{{attr2}}
				&lt;h1&gt;{{attr1}}&lt;/h1&gt;
			&lt;/div&gt;
		&lt;/template&gt;
</code></pre>
<h2 id="父组件获取子组件数据">父组件获取子组件数据</h2>
<ol>
<li>子组件自定义方法抛出数据</li>
</ol>
<pre><code class="language-javascript">methods: {
		send: function() {
		//This指向子组件，触发有个自定义事件
		this.$emit(&quot;e-word&quot;, this.attr2)
				}
	}
</code></pre>
<ol start="2">
<li>父组件定义方法接受数据</li>
</ol>
<pre><code class="language-javascript">methods: {
	getdata: function(attr2) {
	alert(`父组件获取：${attr2}`)
	}
},
</code></pre>
<ol start="3">
<li>绑定</li>
</ol>
<pre><code class="language-Html">		&lt;template id=&quot;t1&quot;&gt;
			&lt;div&gt;
				我是父组件，{{attr1}}
				&lt;erzi :attr1=&quot;attr1&quot; @e-word=&quot;getdata&quot;&gt;&lt;/erzi&gt;
			&lt;/div&gt;
		&lt;/template&gt;
</code></pre>
<h2 id="同级组件的数据获取">同级组件的数据获取</h2>
<ol>
<li>再外部定义一个Vue对象用于媒介</li>
</ol>
<pre><code class="language-javascript">let event = new Vue({})
</code></pre>
<ol start="2">
<li>发送数据</li>
</ol>
<pre><code class="language-javascript">methods: {
		send() {
			event.$emit(&quot;e-word&quot;, this.attr2)
		}
	}
</code></pre>
<ol start="3">
<li>接收数据</li>
</ol>
<pre><code class="language-javascript">event.$on(&quot;e-word&quot;, attr2 =&gt; {
		console.log(attr2)
		alert(`获取组件2的数据：${attr2}`)
	})
</code></pre>
<h2 id="自定义指令">自定义指令</h2>
<p>常用的钩子函数</p>
<ol>
<li>bind：绑定的时候调用</li>
<li>inserted：被绑定的元素被插入到其父节点的时候调用</li>
<li>update：内容更新的时候调用</li>
<li>unbind：解绑的时候调用</li>
</ol>
<ul>
<li>简写：在更新和绑定的时候调用</li>
</ul>
<pre><code class="language-javascript">Vue.directive(&quot;dongzuo&quot;,function(el,binding){
	alert(&quot;Hello World&quot;)
})
</code></pre>
<h2 id="nexttick的使用">nextTick的使用</h2>
<h2 id="2020325">2020/3/25</h2>
<h3 id="动画">动画</h3>
<ol>
<li>我们可以这样理解，整个动画分为进入跟退出两个部分，分别在进入跟退出的时候执行，当进入的时候动画元素的状态是v-enter状态，直到进入动作结束的时候动画元素会变成v-enter-to状态，期间有执行过程的，这一过程就是我们的v-enter-active这一过程，通过对这三者进行控制，我们可以很轻松的实现我们的一些动画，一个退出的动画也分为两个时间点跟一个时间段</li>
<li>这两个动画分别称为半场动画，两者一起可以构成一场动画</li>
<li>虽然vue给我们分成了两个半场动画，四个关键帧，但是实际上在通常情况下v-enter跟v-leave-to，v-leave跟v-enter-to这些关键帧的样式是相同的，因此我们通常会将动画的关键帧分为这两类，同时给定其css样式</li>
<li>使用过渡类名实现动画时首先我们需要使用<transition>标签将需要被启用动画的元素包起来</li>
<li>transition元素是vue官方提供的元素</li>
<li>之后需要自定义两组样式来设置transition包裹的元素中的关键帧样式</li>
<li>通过控制transition的name属性来定义定制动画类</li>
<li>通过这种方式我们可以定制很多不同的动画，并在不同元素上面使用不同动画</li>
<li>到时候只需要在样式中把前缀作为定制样式的前缀就可以了</li>
<li>如：<transition name="my">那么在定义动画类样式的时候就可以用.my-enter,my-leave-to,my-enter-action,my-leave-action来定制自己的动画了</li>
</ol>
<pre><code class="language-Html">&lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;切换动画控制器&quot; @click=&quot;flag=!flag&quot;&gt;
        &lt;transition&gt;
            &lt;div v-if=&quot;flag&quot; style=&quot;color: cornflowerblue;font-size: 90px;&quot;&gt;yerts&lt;/div&gt;
        &lt;/transition&gt;
        &lt;hr&gt;
        &lt;input type=&quot;button&quot; value=&quot;自定义动画类名控制器&quot; @click=&quot;flag2=!flag2&quot;&gt;
        &lt;transition name=&quot;yerts&quot;&gt;
            &lt;div v-if=&quot;flag2&quot; style=&quot;color:darkorange;font-size: 90px;&quot;&gt;yerts&lt;/div&gt;
        &lt;/transition&gt;
    &lt;/div&gt;
</code></pre>
<pre><code class="language-css">/* 元素起始关键帧 */
/* 这里我们只关心起始两个关键帧 */
.v-enter,
.v-leave-to {
    opacity: 0;
    transform: translateX(100px);
}

/* 动画的过渡效果，也就是上半场跟下半场动画的过渡效果 */
.v-enter-active,
.v-leave-active {
    /* 过渡所有属性，过渡时间为0.5秒，过渡效果为擦除 */
    transition: all 0.5s ease;
}

/* 自定义类名动画样式 */
.yerts-enter,
.yerts-leave-to {
    opacity: 0;
    transform: translateY(20px);
}

.yerts-enter-active,
.yerts-leave-active {
    transition: all 0.3s ease;
}
</code></pre>
<pre><code class="language-javascript">let data = {
    flag: true,
    flag2: true
}

let vm = new Vue({
    el: '#app',
    data: data
})
</code></pre>
<h3 id="使用animate-css第三方动画库实现vue中的动画">使用animate css第三方动画库实现vue中的动画</h3>
<p>有些入场和出场效果我们很难自己实现<br>
这时我们就可以使用第三方库来实现我们想要的效果<br>
下面将介绍animate css这一第三方动画库<br>
其动画元素依然要用transition来包裹，只需要改变这个标签的<code>enter-active-class=&quot;&quot;</code>跟<code>leave-active-class=&quot;&quot;</code>就可以了，这些类要把将要使用的动画效果包含进来，我们在官网找到我们要用的效果放到这些类里面即可<br>
在实现动画的时候我们需要在这些类中再加一个animated类，这个类可以将动画挂载上去，其他内容不用再设置css来控制<br>
我们也可以把这个animated类挂在我们将要实现动画的元素上面，这样就不用两边都写animated<br>
我们也可以使用<code>:duration</code>其时间单位是毫秒如:duration=&quot;400&quot;就是说我们的入场动画跟出场动画分别为400毫秒属性指定动画的长度，要记住到现在为止我们都在讲的是单个元素的动画实现</p>
<pre><code class="language-HTML">&lt;input type=&quot;button&quot; value=&quot;自定义动画类名控制器&quot; @click=&quot;flag2=!flag2&quot;&gt;
        &lt;transition enter-active-class=&quot;bounceIn&quot; leave-active-class=&quot;bounceOut&quot; :duration=&quot;{enter:400,leave:200}&quot;&gt;
            &lt;div v-show=&quot;flag2&quot; class=&quot;bool animated &quot;&gt;
            &lt;/div&gt;
 &lt;/transition&gt;
</code></pre>
<h3 id="钩子函数实现半场动画">钩子函数实现半场动画</h3>
<p>上面两种方式都定义了上半场和下半场两场动画，也就是整场动画都实现了，下面我们将会使用钩子函数实现半场动画<br>
因为，有些时候我们只需要上半场动画或者下半场动画<br>
半场动画就是类似于我们加入购物车的时候一个小圆球用动画的方式从上面飞到下面，这种动画的下半场就不用实现了<br>
动画的钩子函数我们也可以在Vue官网找到，并通过生命周期函数实现我们想要实现的效果</p>
<pre><code class="language-html">&lt;transition
  v-on:before-enter=&quot;beforeEnter&quot;
  v-on:enter=&quot;enter&quot;
  v-on:after-enter=&quot;afterEnter&quot;
  v-on:enter-cancelled=&quot;enterCancelled&quot;

  v-on:before-leave=&quot;beforeLeave&quot;
  v-on:leave=&quot;leave&quot;
  v-on:after-leave=&quot;afterLeave&quot;
  v-on:leave-cancelled=&quot;leaveCancelled&quot;
&gt;
  &lt;!-- ... --&gt;
&lt;/transition&gt;
</code></pre>
<pre><code class="language-javascript">methods: {
  // --------
  // 进入中
  // --------

  beforeEnter: function (el) {
    // ...
  },
  // 当与 CSS 结合使用时
  // 回调函数 done 是可选的
  enter: function (el, done) {
    // ...
    done()
  },
  afterEnter: function (el) {
    // ...
  },
  enterCancelled: function (el) {
    // ...
  },

  // --------
  // 离开时
  // --------

  beforeLeave: function (el) {
    // ...
  },
  // 当与 CSS 结合使用时
  // 回调函数 done 是可选的
  leave: function (el, done) {
    // ...
    done()
  },
  afterLeave: function (el) {
    // ...
  },
  // leaveCancelled 只用于 v-show 中
  leaveCancelled: function (el) {
    // ...
  }
}
</code></pre>
<ul>
<li>这些钩子函数非常类似于组建的生命周期函数</li>
<li>在html结构中使用就是事件的绑定机制实现的</li>
<li>在这些生命周期函数中的第一个参数是el，类似于自定义指令里面的参数el一样，是元素的dom内容</li>
</ul>
<p>下面将给出一个例子</p>
<pre><code class="language-html">&lt;input type=&quot;button&quot; value=&quot;自定义动画类名控制器&quot; @click=&quot;flag2=!flag2&quot;&gt;
        &lt;transition @before-enter=&quot;beforeEnter&quot; @enter=&quot;enter&quot; @after-enter=&quot;afterEnter&quot;&gt;
            &lt;div v-show=&quot;flag2&quot; class=&quot;bool&quot;&gt;
            &lt;/div&gt;
&lt;/transition&gt;
</code></pre>
<pre><code class="language-javascript">methods: {
        // --------
        // 进入中
        // --------
        beforeEnter: function (el) {
            // 表示动画入场之前，通过这个生命周期我们可以指定元素的起始位置和状态
            //&quot;translate(0,0)&quot;代表动画开始之前元素在哪儿，我们就指定位置在哪儿
            el.style.transform = &quot;translate(0,0)&quot;
        },
        // 当与 CSS 结合使用时
        // 回调函数 done 是可选的
        enter: function (el, done) {
            //设置过渡，不然元素会直接出现在两个位置
            //可以理解为这个属性是强制动画刷新的属性
            el.offsetWidth
            // 表示动画开始之后的状态，我们可以在这里定义动画在完成时的位置和状态
            el.style.transform = &quot;translate(150px,450px)&quot;
            el.style.transition = &quot;all 2s ease&quot;
            //其实done()这个函数就是afterEnter的引用，也就是立即调用done
            done()
        },
        afterEnter: function (el) {
            // 动画完成之后会调用这一个钩子函数
            //我们在这儿直接让小球消失就可以了
            this.flag2 = !this.flag2
            //我们发现其实在动画在完成完整个动画之后还会等一段时间，这一段事件就是我们定义的动画的长度，因此我们需要一个可以
            //在动画完成之后立即执行下面的函数的一个方法，这时我们就可以使用done()这个方法了
            //这个内容需要在enter里面执行，因为enter里面才定义了我们的动画事件
        }
    },
</code></pre>
<h3 id="使用transition-group来实现对一系列元素的动画设置">使用transition group来实现对一系列元素的动画设置</h3>
<p>我们可以使用transition group给几个元素同时加上同一个动画<br>
用transition group包住我们要产生动画的内容就可以完成这一效果了</p>
<pre><code class="language-html">&lt;label&gt;
                name:
            &lt;/label&gt;
            &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model:value=&quot;name&quot;&gt;
            &lt;label&gt;
                age:
            &lt;/label&gt;
            &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model:value=&quot;age&quot;&gt;
            &lt;input type=&quot;button&quot; value=&quot;加入名单&quot; @click=&quot;addNew&quot;&gt;

            &lt;transition-group&gt;
                &lt;div v-for=&quot;(item,index) in itemList&quot; :key=&quot;index&quot;&gt;
                    &lt;div class=&quot;item&quot;&gt;{{ item.name }}----{{item.age}}----{{index}}&lt;/div&gt;
                &lt;/div&gt;
            &lt;/transition-group&gt;
</code></pre>
<pre><code class="language-javascript">addNew: function () {
            let tempItem = {
                name: this.name,
                age: this.age
            }
            this.itemList.push(tempItem)
            this.name = ''
            this.age = ''
        }
</code></pre>
<pre><code class="language-css">/* 用于给每一列添加动画效果 */
.item {
    border: 1px solid black;
    margin: 20px;
    padding: 10px;
}

/* 鼠标滑过的时候每一列的动画效果 */
.item:hover {
    background-color: aquamarine;
    transition: all 1s ease;
}

/* 动画组的动画效果 */
.v-enter,
.v-leave-to {
    opacity: 0;
    transform: translateY(30px);
}

/* 动画组的动画效果 */
.v-enter-active,
.v-leave-active {
    transition: all 0.5s ease;
}
</code></pre>
<ul>
<li>我们实现了元素删除的动画发现当我们在进行删除的时候会有元素在下面等着上面的元素被删除干净才会去占其位置，这种效果对用户体验来说是非常不友好的，因此用.v-move这个类来解决上面的问题</li>
<li>同时我们也需要给v-leave-to中的position属性设置为absolute，这样才会保证我们元素在撤离的时候就占其位置，但是这也导致了另外一个问题，那就是元素的宽度会出现塌陷的情况，这个问题我们可以在给元素设置宽度的时候将其宽度设置为100%</li>
<li>这样就完美解决了元素删除动画的实现,这里：key绑定的值很重要，不然我们无论点哪个元素都会从最下面开始删除，key的值必须要是唯一的，后面也不会变的那种</li>
</ul>
<pre><code class="language-html">&lt;transition-group&gt;
                    &lt;div v-for=&quot;(item,index) in itemList&quot; :key=&quot;item.id&quot; class=&quot;item&quot;&gt;
                        &lt;div @click=&quot;del(index)&quot;&gt;{{ item.name }}----{{item.age}}&lt;/div&gt;
                    &lt;/div&gt;
                &lt;/transition-group&gt;
</code></pre>
<pre><code class="language-javascript">addNew: function () {
            let tempItem = {
                name: this.name,
                age: this.age
            }
            this.itemList.push(tempItem)
            this.name = ''
            this.age = ''
        },
        del: function (index) {
            this.itemList.splice(index, 1)
            console.log(index)
        }
</code></pre>
<pre><code class="language-css">/* 动画组的动画效果 */
.v-enter,
.v-leave-to {
    opacity: 0;
    transform: translateY(30px);
}

/* 动画组的动画效果 */
.v-enter-active,
.v-leave-active {
    transition: all 0.5s ease;
}

/* 用于解决元素被删除之后会让后面的等的问题 */
.v-move {
    transition: all 0.5s ease;

}

.v-leave-to {
    position: absolute;
}
</code></pre>
<ul>
<li>我们可以在transition group身上加上一个appear属性，这样的话可以在页面加载进来的时候就对被包含的元素都使用一个入场动画</li>
<li>transition group 的实现方式是在被动画的元素外面加上一个span标签来实现的，但是span标签里面包含一个块元素是不符合w3c的代码规范的，因此我们需要想一种办法把外面的span给他取消掉，我们可以将transition group的tag属性设置为&quot;div&quot;来避免这种情况的发生<br>
html</li>
</ul>
<pre><code class="language-html">&lt;transition-group appear tag=&quot;div&quot;&gt;
                    &lt;div v-for=&quot;(item,index) in itemList&quot; :key=&quot;item.id&quot; class=&quot;item&quot;&gt;
                        &lt;div @click=&quot;del(index)&quot;&gt;{{ item.name }}----{{item.age}}&lt;/div&gt;
                    &lt;/div&gt;
                &lt;/transition-group&gt;
</code></pre>
<h1 id="2020330">2020/3/30</h1>
<h2 id="promise">Promise</h2>
<p>一种对象，用于获取异步操作的信息</p>
<ul>
<li>用法:<br>
1. 实例化Promise对象，构造方法中传递方法，该方法用于异步异步任务<br>
2. resolve和reject两个分别用于处理成功和失败的两种情况，通过.then获取</li>
</ul>
<pre><code class="language-javascript">// resolve代表成功 reject失败 都是一个函数

let p = new Promise(function(reslove,reject){

    reject('失败')  //状态由等待变为失败，传的参数作为then函数中失败函数的实参

})


p.then((data)=&gt;{
    console.log('成功'+data)
},(err)=&gt;{
    console.log('失败'+err)
})
</code></pre>
<ul>
<li>then的函数返回值
<ul>
<li>返回Promise()对象，该实例对调用下一个then</li>
<li>返回普通值，则会直接传递给下一个then，通过then参数中的函数的参数值接收值</li>
</ul>
</li>
<li>实例方法
<ul>
<li>.then():获取的异步任务的结果</li>
<li>.catch():获取异常信息</li>
<li>.finally():成功与否都有执行的内容</li>
</ul>
</li>
<li>类方法
<ul>
<li>Promise.all():<br>
所有任务执行完成后出结果</li>
<li>Promise.race()<br>
只要有一个任务完成就有结果</li>
</ul>
</li>
</ul>
<h2 id="axios-的使用">Axios 的使用</h2>
<ul>
<li>Get请求</li>
</ul>
<pre><code class="language-javascript">axios.get('http://localhost:8000/axios?id=111')
				.then(function(response) {
					console.log(response);
				})
axios.get('http://localhost:8000/axios/111')
				.then(function(response) {
					console.log(response);
				})
this.axios.get('http://localhost:8000/axios', {
				params: {
					id: 123,
				}
			}).then(response =&gt; {
				console.log(response);

			}).catch(function(error) {
				console.log(error);
        });
</code></pre>
<ul>
<li>Post请求</li>
</ul>
<pre><code class="language-javascript">axios.post('/user', {
    firstName: 'Fred',
    lastName: 'Flintstone'
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });
</code></pre>
<ul>
<li>多条请求</li>
</ul>
<pre><code class="language-javascript">function getUserAccount() {
  return axios.get('/user/12345');
}

function getUserPermissions() {
  return axios.get('/user/12345/permissions');
}

axios.all([getUserAccount(), getUserPermissions()])
  .then(axios.spread(function (acct, perms) {
   //在此进行操作
  }));
</code></pre>
<h2 id="asyncawait">async/await</h2>
<p>基本用法：<br>
async用在关键字上，进行异步操作<br>
await用在async函数中，用于获取异步结果<br>
async函数返回一个 Promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p>
<pre><code class="language-javascript">async function print(){
    return 1;
}
print().then(e =&gt; console.log(e));   //1
</code></pre>
<p>注意点：</p>
<ol>
<li>await 命令只能用在 async 函数之中，如果用在普通函数，就会报错。</li>
<li>await 只能使用在原生语法中，比如在 forEeach 结构中使用 await 是无法正常工作的，必须使用 for 循环的原生语法。</li>
</ol>
<p>#2020/4/4</p>
<h2 id="vue的路由">Vue的路由</h2>
<h3 id="js-中配置路由">js 中配置路由</h3>
<pre><code class="language-javascript">const routes = [
  { path: '/home', component: Home },
  { path: '/about', component: About }
]
</code></pre>
<ul>
<li>创建router 对路由进行管理，它是由构造函数 new vueRouter() 创建，接受routes 参数</li>
</ul>
<pre><code class="language-javascript">const router = new VueRouter({
      routes // routes: routes 的简写
})
</code></pre>
<ul>
<li>router 实例注入到 vue 根实例中</li>
</ul>
<pre><code class="language-javascript">const app = new Vue({
  router
}).$mount('#app')
</code></pre>
<h3 id="命名路由">命名路由</h3>
<p>给user 路由加一个name 属性</p>
<pre><code class="language-javascript">{
        path: &quot;/user/:id&quot;,
        name: &quot;user&quot;,
        component: user
}
</code></pre>
<h3 id="嵌套路由">嵌套路由</h3>
<p>在home页面上定义三个router-link 标签用于导航，然后再定义一个router-view标签，用于渲染对应的组件。router-link 和router-view 标签要一一对应。home.vue 组件修改如下</p>
<pre><code class="language-javascript">const routes = [
    {
        path:&quot;/home&quot;,

　　　　　// 下面这个属性也不少，因为，我们是先进入home页面，才能进入子路由
        component: home,

　　　　 // 子路由
        children: [
            {
                path: &quot;phone&quot;,
                component: phone
            },
            {
                path: &quot;tablet&quot;,
                component: tablet
            },
            {
                path: &quot;computer&quot;,
                component: computer
            }
        ]
    },
    {
        path: &quot;/about&quot;,
        component: about
    },
    {
        path: &quot;/user/:id&quot;,
        component: user
    },
    {
        path: '/', 
        redirect: '/home' 
    }
]
</code></pre>
<h3 id="编程式导航">编程式导航：</h3>
<p>调用rourter.push() 方法。 当们把router 注入到根实例中后，组件中通过 this.$router 可以获取到router</p>
<pre><code class="language-javascript">this.$router.push(&quot;home&quot;)
</code></pre>
<h3 id="状态管理">状态管理</h3>
<p>在大型应用中，状态管理常常变得复杂，因为状态分散在许多组件内。常常忽略 Vue.js 应用的来源是原生的数据对象—— Vue 实例代理访问它。因此，如果一个状态要被多个实例共享，应避免复制它：</p>
<pre><code class="language-javascript">var sourceOfTruth = {}

var vmA = new Vue({
  data: sourceOfTruth
})

var vmB = new Vue({
  data: sourceOfTruth
})
</code></pre>
<p>现在每当<code>sourceOfTruth</code>被修改后，<code>vmA</code>与<code>vmB</code> 将自动更新它们的视图。扩展这个思路，我们可以实现 store 模式：</p>
<pre><code class="language-javascript">var store = {
  state: {
    message: 'Hello!'
  },
  actionA: function () {
    this.state.message = 'action A triggered'
  },
  actionB: function () {
    this.state.message = 'action B triggered'
  }
}

var vmA = new Vue({
  data: {
    privateState: {},
    sharedState: store.state
  }
})

var vmB = new Vue({
  data: {
    privateState: {},
    sharedState: store.state
  }
})
</code></pre>
<p>我们把所有的 action 放在 store 内，action 修改 store 的状态。集中管理状态更易于理解状态将怎样变化。组件仍然可以拥有和管理它的私有状态。<br>
<img src="https://yangspica27.github.io//post-images/1586655507102.png" alt="" loading="lazy"><br>
有一点要注意，不要在 action 中替换原始的状态对象——为了观察到变化，组件和 store 需要共享这个对象。<br>
如果我们约定，组件不可以直接修改 store 的状态，而应当派发事件，通知 store 执行 action，那么我们基本上实现了 Flux 架构。此约定的好处是，我们能记录 store 所有的状态变化，并且在此之上实现高级的调试帮助函数，如修改日志，快照，历史回滚等。</p>
]]></content>
    </entry>
</feed>