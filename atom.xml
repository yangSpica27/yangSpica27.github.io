<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yangspica27.github.io/</id>
    <title>Spica 27&apos;S Room</title>
    <updated>2020-03-25T08:59:27.871Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yangspica27.github.io/"/>
    <link rel="self" href="https://yangspica27.github.io/atom.xml"/>
    <subtitle>玻璃晴朗 橘子辉煌</subtitle>
    <logo>https://yangspica27.github.io/images/avatar.png</logo>
    <icon>https://yangspica27.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Spica 27&apos;S Room</rights>
    <entry>
        <title type="html"><![CDATA[前端框架技术学习笔记(Vue篇)]]></title>
        <id>https://yangspica27.github.io/post/qian-duan-kuang-jia-ji-zhu-xue-xi-bi-ji-vue-pian/</id>
        <link href="https://yangspica27.github.io/post/qian-duan-kuang-jia-ji-zhu-xue-xi-bi-ji-vue-pian/">
        </link>
        <updated>2020-03-12T11:58:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="2020317">2020/3/17</h1>
<h2 id="vue">Vue</h2>
<ul>
<li>构建数据驱动的Web界面的js渐进式框架</li>
<li>目标：实现响应式的数据绑定的组合的识图组件</li>
<li>核心：响应式的数据绑定系统，只关注视图层</li>
<li>最适合开发单页面应用系统SAP（Single Page Application）</li>
</ul>
<h2 id="基本语法篇">基本语法篇</h2>
<h3 id="绑定">绑定</h3>
<pre><code class="language-html">&lt;div id=&quot;app&quot; v-bind:title=&quot;vueTitle&quot;&gt;
    {{message}}
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    const app = new Vue({
        el: '#app',
        data: {
            message: 'Hello Vue',
            vueTitle:'标题'
        }
    })
</code></pre>
<p>效果：<br>
<img src="https://yangspica27.github.io//post-images/1584404798612.png" alt="" loading="lazy"></p>
<ul>
<li>el：绑定控件</li>
<li>data：声明数据</li>
</ul>
<h2 id="v-if">v-if</h2>
<p>v-if 指令将根据表达式的&quot;seen&quot;值的真假来插入/移除元素</p>
<pre><code class="language-html">&lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;
</code></pre>
<h3 id="v-show">v-show</h3>
<p>根据表达式的数值动态展示隐藏元素</p>
<pre><code class="language-html">&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;
</code></pre>
<h3 id="v-for">v-for</h3>
<p>我们可以用 v-for 指令基于一个数组来渲染一个列表。v-for 指令需要使用 item in items 形式的特殊语法，其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名<br>
语法<code>v-for=&quot;(item, index) in items&quot;</code><br>
item的元素对象，index是索引</p>
<pre><code class="language-HTML">	&lt;div id=&quot;app&quot;&gt;
			&lt;ul&gt;
				&lt;li v-for=&quot;item in list&quot;&gt;
					{{item}}
				&lt;/li&gt;
			&lt;/ul&gt;
		&lt;/div&gt;
		&lt;script type=&quot;text/javascript&quot;&gt;
			const app = new Vue({
				el: &quot;#app&quot;,
				data: {
					list: [
						&quot;item1&quot;,
						&quot;item2&quot;,
						&quot;item3&quot;,
						&quot;item4&quot;
					]
				}
			})
		&lt;/script&gt;
</code></pre>
<h3 id="vue的生命周期">Vue的生命周期</h3>
<blockquote>
<p>所有的生命周期钩子自动绑定 this 上下文到实例中，因此你可以访问数据，对属性和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 created: () =&gt; this.fetchTodos())。这是因为箭头函数绑定了父上下文，因此 this 与你期待的 Vue 实例不同，this.fetchTodos 的行为未定义。</p>
</blockquote>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;{{message}}
			&lt;button v-on:click=&quot;click&quot;&gt;change&lt;/button&gt;
		&lt;/div&gt;

		&lt;script type=&quot;text/javascript&quot;&gt;
			const app = new Vue({
				el: '#app',
				data: {
					message: &quot;hello world&quot;
				},
				beforeCreate:function(){
					console.log(&quot;创建前调用&quot;)
				},
				created: function() {
					console.log('Vue对象被创建的时候调用')
				},
				beforeMount: () =&gt; {
					console.log(&quot;挂载前调用&quot;)
				},
				mounted: () =&gt; {
					console.log('Vue对象挂在到Dom对象的时候执行')
				},
				updated: () =&gt; {
					console.log('data数据更新的时候调用')
				},
				beforeDestroy: () =&gt; {
					console.log('销毁前调用')
				},
				destroyed:function(){
					console.log('销毁完成')
				},

				//钩子函数不用卸载method中
				methods: {
					click: function() {
						this.message = &quot;ok&quot;
					}
				}
			})
		
		&lt;/script&gt;
</code></pre>
<h3 id="数据的双向绑定">数据的双向绑定</h3>
<p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>,<code>&lt;textarea&gt;</code>及<code>&lt;select&gt;</code>元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>
<pre><code class="language-Html">&lt;div id=&quot;app&quot; &gt;
			{{message}}	
			&lt;button v-on:click=&quot;reverse&quot;&gt;逆转消息&lt;/button&gt;
			&lt;br /&gt;
			&lt;!-- v-model指令来表达输入事件之间的双向绑定 --&gt;
			&lt;input v-model:value=&quot;message&quot; /&gt;
		&lt;/div&gt;

	
		&lt;script type=&quot;text/javascript&quot;&gt;
			const app = new Vue({
				el: '#app',
				data: {
					message: 'Hello Vue',
				},
				//定义的函数于此
				methods: {
					reverse: function() {
						console.log(this.message)
						this.message = this.message.split('').reverse().join('')
					}
				}
			})
		&lt;/script&gt;
</code></pre>
<p>#2020/3/19</p>
<h3 id="计算属性-computed">计算属性 computed</h3>
<ul>
<li>在一个计算属性里可以完成各种复杂的逻辑，包括运算、函数调用等，只要最终返回一个结果就可以。</li>
</ul>
<pre><code class="language-html">&lt;div id=&quot;example&quot;&gt;
  &lt;p&gt;Original message: &quot;{{ message }}&quot;&lt;/p&gt;
  &lt;p&gt;Computed reversed message: &quot;{{ reversedMessage }}&quot;&lt;/p&gt;　　
&lt;/div&gt;
</code></pre>
<pre><code class="language-javascript">var vm = new Vue({
  el: '#example',
  data: {
    message: 'Hello'
  },
  computed: {
    // 计算属性的 getter
    reversedMessage: function () {
      // `this` 指向 vm 实例
      return this.message.split('').reverse().join('')
    }
  }
})
</code></pre>
<ul>
<li>计算属性还能拥有自己的Get和Set方法</li>
</ul>
<pre><code class="language-JavaScript">var vm = new Vue({
    el: '#demo',
    data: {
        firstName: 'Foo',
        lastName: 'Bar'
    },
    computed: {
        fullName: {
            // getter
            get: function () {
                return this.firstName + ' ' + this.lastName
            },
            // setter
            set: function (newValue) {
                var names = newValue.split(' ');
                this.firstName = names[0];
                this.lastName = names[names.length - 1];
            }
        }
    }
});
</code></pre>
<h3 id="侦听器-watch">侦听器 watch</h3>
<p>Watch的作用可以监控一个值的变换，并调用因为变化需要执行的方法。可以通过watch动态改变关联的状态。</p>
<pre><code class="language-JavaScript">watch: {
					enterBrand: function() {
						// 判断类型是否非法
						let obj = this.enterBrand
						if (typeof obj == &quot;undefined&quot; || obj == null || obj == &quot;&quot;) {
							this.check1 = true;
						} else {
							this.check1 = false;
						}
					}
                    }
</code></pre>
<h3 id="过滤器">过滤器</h3>
<p>过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p>
<pre><code class="language-html">&lt;!-- 在双花括号中 --&gt;
{{ message | capitalize }}

&lt;!-- 在 `v-bind` 中 --&gt;
&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;
</code></pre>
<pre><code class="language-JavaScript">filters: {
  capitalize: function (value) {
    if (!value) return ''
    value = value.toString()
    return value.charAt(0).toUpperCase() + value.slice(1)
  }
}
</code></pre>
<h1 id="2020322">2020/3/22</h1>
<h2 id="组件">组件</h2>
<p>Tips：</p>
<ul>
<li>组件默认情况下，只能去调用自己的属性和方法，不能够跨组件调用</li>
<li>子组件和父组件，不能并列使用</li>
<li>模板中有且只有一个根元素</li>
<li>组件名称一定要小写，否则无法解析</li>
</ul>
<h2 id="子组件调用父组件数据数据">子组件调用父组件数据数据</h2>
<ol>
<li>子组件发送申请</li>
</ol>
<pre><code class="language-Html">&lt;template id=&quot;t1&quot;&gt;
			&lt;div&gt;
				我是父组件，{{attr1}}
				&lt;erzi :attr1=&quot;attr1&quot;&gt;&lt;/erzi&gt;
			&lt;/div&gt;

		&lt;/template&gt;
</code></pre>
<ol start="2">
<li>定义props</li>
</ol>
<pre><code class="language-JavaScript">						components: {
							'erzi': {
								template: '#t2',
								data() {
									return {
										attr2: '我是子组件的数据'
									}
								},
								props: [&quot;attr1&quot;]
							}
						}
</code></pre>
<ol start="3">
<li>调用</li>
</ol>
<pre><code class="language-Html">&lt;template id=&quot;t2&quot;&gt;
			&lt;div&gt;我是子组件，{{attr2}}
				&lt;h1&gt;{{attr1}}&lt;/h1&gt;
			&lt;/div&gt;
		&lt;/template&gt;
</code></pre>
<h2 id="父组件获取子组件数据">父组件获取子组件数据</h2>
<ol>
<li>子组件自定义方法抛出数据</li>
</ol>
<pre><code class="language-javascript">methods: {
		send: function() {
		//This指向子组件，触发有个自定义事件
		this.$emit(&quot;e-word&quot;, this.attr2)
				}
	}
</code></pre>
<ol start="2">
<li>父组件定义方法接受数据</li>
</ol>
<pre><code class="language-javascript">methods: {
	getdata: function(attr2) {
	alert(`父组件获取：${attr2}`)
	}
},
</code></pre>
<ol start="3">
<li>绑定</li>
</ol>
<pre><code class="language-Html">		&lt;template id=&quot;t1&quot;&gt;
			&lt;div&gt;
				我是父组件，{{attr1}}
				&lt;erzi :attr1=&quot;attr1&quot; @e-word=&quot;getdata&quot;&gt;&lt;/erzi&gt;
			&lt;/div&gt;
		&lt;/template&gt;
</code></pre>
<h2 id="同级组件的数据获取">同级组件的数据获取</h2>
<ol>
<li>再外部定义一个Vue对象用于媒介</li>
</ol>
<pre><code class="language-javascript">let event = new Vue({})
</code></pre>
<ol start="2">
<li>发送数据</li>
</ol>
<pre><code class="language-javascript">methods: {
		send() {
			event.$emit(&quot;e-word&quot;, this.attr2)
		}
	}
</code></pre>
<ol start="3">
<li>接收数据</li>
</ol>
<pre><code class="language-javascript">event.$on(&quot;e-word&quot;, attr2 =&gt; {
		console.log(attr2)
		alert(`获取组件2的数据：${attr2}`)
	})
</code></pre>
<h2 id="自定义指令">自定义指令</h2>
<p>常用的钩子函数</p>
<ol>
<li>bind：绑定的时候调用</li>
<li>inserted：被绑定的元素被插入到其父节点的时候调用</li>
<li>update：内容更新的时候调用</li>
<li>unbind：解绑的时候调用</li>
</ol>
<ul>
<li>简写：在更新和绑定的时候调用</li>
</ul>
<pre><code class="language-javascript">Vue.directive(&quot;dongzuo&quot;,function(el,binding){
	alert(&quot;Hello World&quot;)
})
</code></pre>
<h2 id="nexttick的使用">nextTick的使用</h2>
<h2 id="2020325">2020/3/25</h2>
<h3 id="动画">动画</h3>
<ol>
<li>我们可以这样理解，整个动画分为进入跟退出两个部分，分别在进入跟退出的时候执行，当进入的时候动画元素的状态是v-enter状态，直到进入动作结束的时候动画元素会变成v-enter-to状态，期间有执行过程的，这一过程就是我们的v-enter-active这一过程，通过对这三者进行控制，我们可以很轻松的实现我们的一些动画，一个退出的动画也分为两个时间点跟一个时间段</li>
<li>这两个动画分别称为半场动画，两者一起可以构成一场动画</li>
<li>虽然vue给我们分成了两个半场动画，四个关键帧，但是实际上在通常情况下v-enter跟v-leave-to，v-leave跟v-enter-to这些关键帧的样式是相同的，因此我们通常会将动画的关键帧分为这两类，同时给定其css样式</li>
<li>使用过渡类名实现动画时首先我们需要使用<transition>标签将需要被启用动画的元素包起来</li>
<li>transition元素是vue官方提供的元素</li>
<li>之后需要自定义两组样式来设置transition包裹的元素中的关键帧样式</li>
<li>通过控制transition的name属性来定义定制动画类</li>
<li>通过这种方式我们可以定制很多不同的动画，并在不同元素上面使用不同动画</li>
<li>到时候只需要在样式中把前缀作为定制样式的前缀就可以了</li>
<li>如：<transition name="my">那么在定义动画类样式的时候就可以用.my-enter,my-leave-to,my-enter-action,my-leave-action来定制自己的动画了</li>
</ol>
<pre><code class="language-Html">&lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;切换动画控制器&quot; @click=&quot;flag=!flag&quot;&gt;
        &lt;transition&gt;
            &lt;div v-if=&quot;flag&quot; style=&quot;color: cornflowerblue;font-size: 90px;&quot;&gt;yerts&lt;/div&gt;
        &lt;/transition&gt;
        &lt;hr&gt;
        &lt;input type=&quot;button&quot; value=&quot;自定义动画类名控制器&quot; @click=&quot;flag2=!flag2&quot;&gt;
        &lt;transition name=&quot;yerts&quot;&gt;
            &lt;div v-if=&quot;flag2&quot; style=&quot;color:darkorange;font-size: 90px;&quot;&gt;yerts&lt;/div&gt;
        &lt;/transition&gt;
    &lt;/div&gt;
</code></pre>
<pre><code class="language-css">/* 元素起始关键帧 */
/* 这里我们只关心起始两个关键帧 */
.v-enter,
.v-leave-to {
    opacity: 0;
    transform: translateX(100px);
}

/* 动画的过渡效果，也就是上半场跟下半场动画的过渡效果 */
.v-enter-active,
.v-leave-active {
    /* 过渡所有属性，过渡时间为0.5秒，过渡效果为擦除 */
    transition: all 0.5s ease;
}

/* 自定义类名动画样式 */
.yerts-enter,
.yerts-leave-to {
    opacity: 0;
    transform: translateY(20px);
}

.yerts-enter-active,
.yerts-leave-active {
    transition: all 0.3s ease;
}
</code></pre>
<pre><code class="language-javascript">let data = {
    flag: true,
    flag2: true
}

let vm = new Vue({
    el: '#app',
    data: data
})
</code></pre>
<h3 id="使用animate-css第三方动画库实现vue中的动画">使用animate css第三方动画库实现vue中的动画</h3>
<p>有些入场和出场效果我们很难自己实现<br>
这时我们就可以使用第三方库来实现我们想要的效果<br>
下面将介绍animate css这一第三方动画库<br>
其动画元素依然要用transition来包裹，只需要改变这个标签的<code>enter-active-class=&quot;&quot;</code>跟<code>leave-active-class=&quot;&quot;</code>就可以了，这些类要把将要使用的动画效果包含进来，我们在官网找到我们要用的效果放到这些类里面即可<br>
在实现动画的时候我们需要在这些类中再加一个animated类，这个类可以将动画挂载上去，其他内容不用再设置css来控制<br>
我们也可以把这个animated类挂在我们将要实现动画的元素上面，这样就不用两边都写animated<br>
我们也可以使用<code>:duration</code>其时间单位是毫秒如:duration=&quot;400&quot;就是说我们的入场动画跟出场动画分别为400毫秒属性指定动画的长度，要记住到现在为止我们都在讲的是单个元素的动画实现</p>
<pre><code class="language-HTML">&lt;input type=&quot;button&quot; value=&quot;自定义动画类名控制器&quot; @click=&quot;flag2=!flag2&quot;&gt;
        &lt;transition enter-active-class=&quot;bounceIn&quot; leave-active-class=&quot;bounceOut&quot; :duration=&quot;{enter:400,leave:200}&quot;&gt;
            &lt;div v-show=&quot;flag2&quot; class=&quot;bool animated &quot;&gt;
            &lt;/div&gt;
 &lt;/transition&gt;
</code></pre>
<h3 id="钩子函数实现半场动画">钩子函数实现半场动画</h3>
<p>上面两种方式都定义了上半场和下半场两场动画，也就是整场动画都实现了，下面我们将会使用钩子函数实现半场动画<br>
因为，有些时候我们只需要上半场动画或者下半场动画<br>
半场动画就是类似于我们加入购物车的时候一个小圆球用动画的方式从上面飞到下面，这种动画的下半场就不用实现了<br>
动画的钩子函数我们也可以在Vue官网找到，并通过生命周期函数实现我们想要实现的效果</p>
<pre><code class="language-html">&lt;transition
  v-on:before-enter=&quot;beforeEnter&quot;
  v-on:enter=&quot;enter&quot;
  v-on:after-enter=&quot;afterEnter&quot;
  v-on:enter-cancelled=&quot;enterCancelled&quot;

  v-on:before-leave=&quot;beforeLeave&quot;
  v-on:leave=&quot;leave&quot;
  v-on:after-leave=&quot;afterLeave&quot;
  v-on:leave-cancelled=&quot;leaveCancelled&quot;
&gt;
  &lt;!-- ... --&gt;
&lt;/transition&gt;
</code></pre>
<pre><code class="language-javascript">methods: {
  // --------
  // 进入中
  // --------

  beforeEnter: function (el) {
    // ...
  },
  // 当与 CSS 结合使用时
  // 回调函数 done 是可选的
  enter: function (el, done) {
    // ...
    done()
  },
  afterEnter: function (el) {
    // ...
  },
  enterCancelled: function (el) {
    // ...
  },

  // --------
  // 离开时
  // --------

  beforeLeave: function (el) {
    // ...
  },
  // 当与 CSS 结合使用时
  // 回调函数 done 是可选的
  leave: function (el, done) {
    // ...
    done()
  },
  afterLeave: function (el) {
    // ...
  },
  // leaveCancelled 只用于 v-show 中
  leaveCancelled: function (el) {
    // ...
  }
}
</code></pre>
<ul>
<li>这些钩子函数非常类似于组建的生命周期函数</li>
<li>在html结构中使用就是事件的绑定机制实现的</li>
<li>在这些生命周期函数中的第一个参数是el，类似于自定义指令里面的参数el一样，是元素的dom内容</li>
</ul>
<p>下面将给出一个例子</p>
<pre><code class="language-html">&lt;input type=&quot;button&quot; value=&quot;自定义动画类名控制器&quot; @click=&quot;flag2=!flag2&quot;&gt;
        &lt;transition @before-enter=&quot;beforeEnter&quot; @enter=&quot;enter&quot; @after-enter=&quot;afterEnter&quot;&gt;
            &lt;div v-show=&quot;flag2&quot; class=&quot;bool&quot;&gt;
            &lt;/div&gt;
&lt;/transition&gt;
</code></pre>
<pre><code class="language-javascript">methods: {
        // --------
        // 进入中
        // --------
        beforeEnter: function (el) {
            // 表示动画入场之前，通过这个生命周期我们可以指定元素的起始位置和状态
            //&quot;translate(0,0)&quot;代表动画开始之前元素在哪儿，我们就指定位置在哪儿
            el.style.transform = &quot;translate(0,0)&quot;
        },
        // 当与 CSS 结合使用时
        // 回调函数 done 是可选的
        enter: function (el, done) {
            //设置过渡，不然元素会直接出现在两个位置
            //可以理解为这个属性是强制动画刷新的属性
            el.offsetWidth
            // 表示动画开始之后的状态，我们可以在这里定义动画在完成时的位置和状态
            el.style.transform = &quot;translate(150px,450px)&quot;
            el.style.transition = &quot;all 2s ease&quot;
            //其实done()这个函数就是afterEnter的引用，也就是立即调用done
            done()
        },
        afterEnter: function (el) {
            // 动画完成之后会调用这一个钩子函数
            //我们在这儿直接让小球消失就可以了
            this.flag2 = !this.flag2
            //我们发现其实在动画在完成完整个动画之后还会等一段时间，这一段事件就是我们定义的动画的长度，因此我们需要一个可以
            //在动画完成之后立即执行下面的函数的一个方法，这时我们就可以使用done()这个方法了
            //这个内容需要在enter里面执行，因为enter里面才定义了我们的动画事件
        }
    },
</code></pre>
<h3 id="使用transition-group来实现对一系列元素的动画设置">使用transition group来实现对一系列元素的动画设置</h3>
<p>我们可以使用transition group给几个元素同时加上同一个动画<br>
用transition group包住我们要产生动画的内容就可以完成这一效果了</p>
<pre><code class="language-html">&lt;label&gt;
                name:
            &lt;/label&gt;
            &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model:value=&quot;name&quot;&gt;
            &lt;label&gt;
                age:
            &lt;/label&gt;
            &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; v-model:value=&quot;age&quot;&gt;
            &lt;input type=&quot;button&quot; value=&quot;加入名单&quot; @click=&quot;addNew&quot;&gt;

            &lt;transition-group&gt;
                &lt;div v-for=&quot;(item,index) in itemList&quot; :key=&quot;index&quot;&gt;
                    &lt;div class=&quot;item&quot;&gt;{{ item.name }}----{{item.age}}----{{index}}&lt;/div&gt;
                &lt;/div&gt;
            &lt;/transition-group&gt;
</code></pre>
<pre><code class="language-javascript">addNew: function () {
            let tempItem = {
                name: this.name,
                age: this.age
            }
            this.itemList.push(tempItem)
            this.name = ''
            this.age = ''
        }
</code></pre>
<pre><code class="language-css">/* 用于给每一列添加动画效果 */
.item {
    border: 1px solid black;
    margin: 20px;
    padding: 10px;
}

/* 鼠标滑过的时候每一列的动画效果 */
.item:hover {
    background-color: aquamarine;
    transition: all 1s ease;
}

/* 动画组的动画效果 */
.v-enter,
.v-leave-to {
    opacity: 0;
    transform: translateY(30px);
}

/* 动画组的动画效果 */
.v-enter-active,
.v-leave-active {
    transition: all 0.5s ease;
}
</code></pre>
<ul>
<li>我们实现了元素删除的动画发现当我们在进行删除的时候会有元素在下面等着上面的元素被删除干净才会去占其位置，这种效果对用户体验来说是非常不友好的，因此用.v-move这个类来解决上面的问题</li>
<li>同时我们也需要给v-leave-to中的position属性设置为absolute，这样才会保证我们元素在撤离的时候就占其位置，但是这也导致了另外一个问题，那就是元素的宽度会出现塌陷的情况，这个问题我们可以在给元素设置宽度的时候将其宽度设置为100%</li>
<li>这样就完美解决了元素删除动画的实现,这里：key绑定的值很重要，不然我们无论点哪个元素都会从最下面开始删除，key的值必须要是唯一的，后面也不会变的那种</li>
</ul>
<pre><code class="language-html">&lt;transition-group&gt;
                    &lt;div v-for=&quot;(item,index) in itemList&quot; :key=&quot;item.id&quot; class=&quot;item&quot;&gt;
                        &lt;div @click=&quot;del(index)&quot;&gt;{{ item.name }}----{{item.age}}&lt;/div&gt;
                    &lt;/div&gt;
                &lt;/transition-group&gt;
</code></pre>
<pre><code class="language-javascript">addNew: function () {
            let tempItem = {
                name: this.name,
                age: this.age
            }
            this.itemList.push(tempItem)
            this.name = ''
            this.age = ''
        },
        del: function (index) {
            this.itemList.splice(index, 1)
            console.log(index)
        }
</code></pre>
<pre><code class="language-css">/* 动画组的动画效果 */
.v-enter,
.v-leave-to {
    opacity: 0;
    transform: translateY(30px);
}

/* 动画组的动画效果 */
.v-enter-active,
.v-leave-active {
    transition: all 0.5s ease;
}

/* 用于解决元素被删除之后会让后面的等的问题 */
.v-move {
    transition: all 0.5s ease;

}

.v-leave-to {
    position: absolute;
}
</code></pre>
<ul>
<li>我们可以在transition group身上加上一个appear属性，这样的话可以在页面加载进来的时候就对被包含的元素都使用一个入场动画</li>
<li>transition group 的实现方式是在被动画的元素外面加上一个span标签来实现的，但是span标签里面包含一个块元素是不符合w3c的代码规范的，因此我们需要想一种办法把外面的span给他取消掉，我们可以将transition group的tag属性设置为&quot;div&quot;来避免这种情况的发生<br>
html</li>
</ul>
<pre><code class="language-html">&lt;transition-group appear tag=&quot;div&quot;&gt;
                    &lt;div v-for=&quot;(item,index) in itemList&quot; :key=&quot;item.id&quot; class=&quot;item&quot;&gt;
                        &lt;div @click=&quot;del(index)&quot;&gt;{{ item.name }}----{{item.age}}&lt;/div&gt;
                    &lt;/div&gt;
                &lt;/transition-group&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端框架技术学习笔记]]></title>
        <id>https://yangspica27.github.io/post/qian-duan-kuang-jia-ji-zhu-xue-xi-bi-ji/</id>
        <link href="https://yangspica27.github.io/post/qian-duan-kuang-jia-ji-zhu-xue-xi-bi-ji/">
        </link>
        <updated>2020-03-08T10:22:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="202038">2020/3/8</h1>
<h2 id="es6部分其一">ES6部分(其一)</h2>
<h3 id="var-let-const">var     let    const</h3>
<ul>
<li>var声明可以重复声明 重新定义 属于当前的函数</li>
</ul>
<pre><code class="language-JavaScript">			if(true){
				var a=1;
			}
			console.log(a);//编译通过
</code></pre>
<ul>
<li>let&amp;conset仅在其所在代码块有效</li>
</ul>
<pre><code class="language-JavaScript">   		let a=1 ;//全局
   		if(true){
   			let a=2; //局部
   			console.log(a);
   		}
   		console.log(a);
</code></pre>
<p>输出结果：2 1</p>
<pre><code class="language-JavaScript">for (var a = 0; a &lt;= 2; a++) {
				console.log(a)
				setTimeout(function() {
					console.log(a)
				}, 1000)
			}
</code></pre>
<p>输出：1    2   2   2</p>
<pre><code class="language-JavaScript">for (let a = 0; a &lt;= 2; a++) {
				console.log(a)
				setTimeout(function() {
					console.log(a)
				}, 1000)
			}
</code></pre>
<p>输出：1 2  1  2</p>
<ul>
<li>
<p>let可以重复赋值，const不能重新复制但能改变其属性（类似Kt中的val）</p>
</li>
<li>
<p>Temporal Dead Zone (TDZ) 暂时性死区<br>
<strong>不要在变量未声明前使用变量</strong></p>
</li>
</ul>
<h3 id="使用规则">使用规则：</h3>
<ul>
<li>默认使用conset</li>
<li>需要重新绑定或者更新使用let</li>
<li>尽量不适用var</li>
</ul>
<h3 id="箭头函数">箭头函数</h3>
<pre><code class="language-JavaScript">	const nums=[1,2,3,4,5,6,7]
			const nums2=nums.map((number,i)=&gt;{
				console.log(`${i}:${number*2}`)
			})
</code></pre>
<p>输出：<br>
0:2<br>
1:4<br>
2:6<br>
3:12<br>
···<br>
<strong>规则：去掉function，加=&gt;</strong></p>
<pre><code class="language-JavaScript">const chengkeyu = {
				name: &quot;chengkeyu&quot;,
				hobbies: ['Eating', 'Sleeping'],
				printHobbies: function() {
					this.hobbies.map(function(hobby){
						console.log(`${this.name} like ${hobby}`)
					})
				}
			}
			chengkeyu.printHobbies()
</code></pre>
<p>输出：like Eating<br>
like Sleeping<br>
name没有，<strong>因为js中，this实在运行时才绑定的</strong>此时的this.name所在的函数是一个独立函数，所以指向的是window</p>
<pre><code class="language-JavaScript">const chengkeyu = {
				name: &quot;chengkeyu&quot;,
				hobbies: ['Eating', 'Sleeping'],
				printHobbies: function() {
					this.hobbies.map((hobby)=&gt;{
						console.log(`${this.name} like ${hobby}`)
					})
					
				}
			}
			chengkeyu.printHobbies()
</code></pre>
<p>输出：chengkeyu like Eating<br>
chengkeyu like Sleeping<br>
原因：箭头函数是词法作用域，没有自己的this，继承于父级函数</p>
<h3 id="字符串模板">字符串模板</h3>
<p>格式：</p>
<pre><code>`文本${变量或者代码块}文本`
</code></pre>
<p><strong>字符串模板允许嵌套</strong><br>
示例：</p>
<pre><code class="language-JavaScript">		const objs = [{
					firstName: &quot;yang&quot;,
					lastName: &quot;weizhi&quot;
				},
				{
					firstName: &quot;cheng&quot;,
					lastName: &quot;keyu&quot;
				},
				{
					firstName: &quot;zhao&quot;,
					lastName: &quot;qian&quot;
				},
			]
			const temp=`
			&lt;ul&gt;
			${objs.map(name=&gt;`&lt;li&gt;${name.firstName}性男子&lt;/li&gt;`)}
			&lt;/ul&gt;
			`
		document.body.innerHTML=temp
</code></pre>
<p>显示效果：<br>
<img src="https://yangspica27.github.io//post-images/1583756571592.png" alt="" loading="lazy"></p>
<h3 id="数组解构">数组解构</h3>
<p>数组对数组</p>
<pre><code class="language-javascript">const nums=[1,2,3,4]
		const [one,two]=nums
		console.log(one,two)
</code></pre>
<p>打印： 1 2<br>
Restful的写法</p>
<pre><code class="language-javascript">const nums=[1,2,3,4]
		const [one,...others]=nums
		console.log(one,others)
</code></pre>
<p>打印：1234<br>
<strong>注意：...仅能声明在最后，不然会报错</strong></p>
<p>数组解构实现变量交换</p>
<pre><code class="language-javascript">const a=1
const b=2
[a,b]=[b,a]
</code></pre>
<p>默认值</p>
<pre><code class="language-javascript">const [a = 1, b] = [undefined, 2]
			console.log(a, b)
			const [c = 1, d] = [null, 2]
			console.log(c, d)
</code></pre>
<p>打印：1 2<br>
null 2<br>
undefined表示不给值，null表示给个null值</p>
<h3 id="对象解构">对象解构</h3>
<p>原则：key值对应</p>
<pre><code class="language-javascript">	const Chengkeyu={
			name:&quot;陈科宇&quot;,
			sex:&quot;男&quot;,
			hobbies:[&quot;羽毛球&quot;,&quot;睡觉&quot;],
		}
		const {name,hobbies}=Chengkeyu
		console.log(`${name}喜欢${hobbies}`)
</code></pre>
<p>打印：陈科宇喜欢羽毛球,睡觉</p>
<p>重命名</p>
<pre><code class="language-javascript">	const Chengkeyu={
			name:&quot;陈科宇&quot;,
			sex:&quot;男&quot;,
			hobbies:[&quot;羽毛球&quot;,&quot;睡觉&quot;],
		}
		const {name:a,hobbies:b}=Chengkeyu
		console.log(`${a}喜欢${b}`)
</code></pre>
<p>注意点：<br>
错误写法</p>
<pre><code class="language-javascript">	const Chengkeyu={
			name:&quot;陈科宇&quot;,
			sex:&quot;男&quot;,
			hobbies:[&quot;羽毛球&quot;,&quot;睡觉&quot;],
		}
		{name:a,hobbies:b}=Chengkeyu
		console.log(`${a}喜欢${b}`)
</code></pre>
<p><strong>此时会报错</strong><br>
报错原因：大括号内的内容<code>{name:a,hobbies:b}</code>会被编译器当作代码块而非变量<br>
所以需要加<strong>外部加括号且提前声明</strong></p>
<h3 id="拓展运算符">拓展运算符</h3>
<pre><code class="language-javascript">	const nums1=[1,2,3]
		const nums2=[5,6,7]
		const nums3=[...nums1,4,...nums2]
        const nums4=nums3
		console.log(nums4)
</code></pre>
<p>打印： 123456<br>
Warning：此时nums4持有的是nums3的索引，所以对nums4进行修改会导致nums3同时变化<br>
所以正确赋值姿势应该为<code>const nums4=[].concat(nums3)</code></p>
<h3 id="rest运算符剩余参数">Rest运算符（剩余参数）</h3>
<pre><code class="language-javascript">	function a(...nums) {
				console.log(nums)
			}

			a(1, 23, 4, 234)
</code></pre>
<p>打印：(4) [1, 23, 4, 234]<br>
nums以array的形式保存了这些参数</p>
<h1 id="2020310">2020/3/10</h1>
<h2 id="js的基础复习">Js的基础复习</h2>
<h3 id="网页的生成流程">网页的生成流程</h3>
<ol>
<li>HTML代码转换成DOM、</li>
<li>CSS代码转换为CSSOM（CSS Object Model）</li>
<li>结合DOM和CSSOM，生成渲染树，Render tree，包含各个节点的视觉信息</li>
<li><em>耗时操作</em>   生成布局Layout,j将所有的渲染树的所有节点进行平面整合</li>
<li><em>耗时操作</em>   将布局绘制（paint）在屏幕上</li>
</ol>
<ul>
<li>生成的布局flow与绘制paint合称渲染</li>
<li>网页生成之时至少渲染一次，用户访问过程中不会中断渲染</li>
<li>重新渲染包含：<strong>重排</strong>和<strong>重绘</strong>，重绘不一定要重排，重排一定会重绘</li>
</ul>
<p>JS的组成</p>
<ul>
<li>ECMAScript：定义语法规范</li>
<li>DOM：文档对象模型</li>
<li>BOM：浏览器对象模型</li>
</ul>
<h3 id="arguments">arguments：</h3>
<pre><code class="language-javascript">function pringArgs(){
    console.log(arguments)
}
pringArgs(10,11)
</code></pre>
<p>此处的arguments为10,11</p>
<h3 id="函数的定义方式">函数的定义方式</h3>
<ol>
<li>函数声明方式：function 关键字        命名函数</li>
<li>函数表达式                                   匿名函数</li>
<li>new Function()                              执行效率低，较少使用<br>
注意：所有函数都是Function对象</li>
</ol>
<h3 id="作用域">作用域</h3>
<ol>
<li>全局变量（尽可能不要使用）</li>
<li>局部变量</li>
<li>块级作用域</li>
<li>词法作用域</li>
</ol>
<h3 id="js的预解析过程">JS的预解析过程</h3>
<ol>
<li>变量声明提升至当前作用域的最前，仅会提升声明，而不会赋值</li>
<li>把函数的声明提升到最前，仅会提升声明，而不会调用</li>
<li>先var 再function</li>
</ol>
<h3 id="对象存储">对象存储</h3>
<p>简单类型的存储： 会独立的存于堆内存中<br>
复杂对象的存储：栈仅存储指针，指向堆中的对象</p>
<h1 id="2020311">2020/3/11</h1>
<h2 id="es6部分其二">ES6部分（其二）</h2>
<h3 id="标签模板">标签模板</h3>
<p>再字符串模板中加入方法名标签，使之返回我们规定要求的字符</p>
<pre><code class="language-javaScript">//标签模板字符串
function hightLight(string,...values) {
    debugger;
return 'laravist'
}
const user=&quot;marry&quot;
const topic=&quot;learn to use md&quot;
const sentence=hightLight`${user} has commend on your topic ${topic}`
 console.log(sentence)
</code></pre>
<p>运行结果：laravist<br>
strings为自带字符串所组成集合<br>
values为模板字符串所组成的集合（user，topic）</p>
<h3 id="新增的字符串函数">新增的字符串函数</h3>
<ol>
<li>startWith</li>
<li>endWith</li>
<li>includies</li>
<li>repeat<br>
示例</li>
</ol>
<pre><code class="language-javascript">const id=&quot;1234567890&quot;
const fan=&quot;I Love Sleep&quot;
console.log(id.startsWith(234,1))//true
console.log(id.endsWith(6789,9))//true
console.log(id.includes(12,7))//第七位后是否包含12
console.log(fan.repeat(2))//重复两次
//repeat实现右对齐
function padder(string,length=25) {
    return `${' '.repeat(Math.max(length-string.length,0))}${string}`
}
</code></pre>
<h3 id="for-of">for of</h3>
<p>传统的循环的缺点</p>
<ul>
<li>for循环语法繁琐</li>
<li>for in循环会打印所有的对象而非只有数组内的对象</li>
<li>for each不能中断<br>
for of 只会获取数组内的对象，不会引入其所有内容</li>
</ul>
<pre><code class="language-javascript">const fruits=['香蕉','核桃','柠檬','火龙果']
//for in会打印所有 of只会打印数组内的
for (let fruit of fruits){
    console.log(fruit)
}
/**
</code></pre>
<h3 id="map">Map</h3>
<p>与java中的map类似<br>
具体看示例</p>
<pre><code class="language-javaScript">const people = new Map();
//添加元素
people.set(&quot;cky&quot;, 18);
people.set(&quot;ywz&quot;, 20);
people.set(&quot;zq&quot;, 22);
console.log(people);
//获取大小
people.size;
//判断有无
people.has(&quot;zq&quot;);
//删除
people.delete(&quot;zq&quot;);
//全清
people.clear();
const nums=[1,2,3,4,5,5]
//直接赋值
const fruits = new Map([['apple', 12], ['banana', 23]]);
</code></pre>
<h3 id="weakmap">WeakMap</h3>
<p>weakMap不能循环，没有size，没有clear，key必须是对象<br>
但weakMap会自动回收，可用于内存优化</p>
<pre><code class="language-javascript">week map
const strong=new Map();
const weak=new WeakMap();
</code></pre>
<h3 id="class">Class</h3>
<p>传统的对象，如果声明方法需要使用prototype，而且存在变量提升<br>
例：</p>
<pre><code class="language-javaScript">function User(name, email) {
    this.name = name;
    this.email = email;
}
const yang = new User(123, 123)
User.prototype.speak = function () {
    console.log(`Hi I am ${this.name}`)
}
</code></pre>
<p>但在Class中，使用构造方法和直接声明方法的方式替代了原先的姿势<br>
例：</p>
<pre><code class="language-javaScript">class Book {
    constructor(name, email) {
        //构造函数
        this.name = name
        this.email = email
    }
    info(){
        console.log(`Hi I am ${this.name}`)
    }
    //直接BOOK调用，示例不可调用
    static desc(){
        console.log(&quot;hello world&quot;)
    }
}
new Book(123,123).info()
Book.desc()
</code></pre>
<p>值得注意的是</p>
<ol>
<li>class不会存在变量提升，所有要先声明在使用</li>
<li>class中的静态方法，只能自身调用，自身的示例无法调用<br>
如上示例</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[后端框架技术学习笔记]]></title>
        <id>https://yangspica27.github.io/post/hou-duan-kuang-jia-ji-zhu-xue-xi-bi-ji/</id>
        <link href="https://yangspica27.github.io/post/hou-duan-kuang-jia-ji-zhu-xue-xi-bi-ji/">
        </link>
        <updated>2020-03-08T06:22:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="202038">2020/3/8</h1>
<h2 id="认识springboot">认识SpringBoot</h2>
<h3 id="springboot的优点">SpringBoot的优点</h3>
<ul>
<li>创建独立的Spring应用程序</li>
<li>嵌入TomCat，无需部署WAR文件</li>
<li>无代码生成，无xml配置要求</li>
</ul>
<h1 id="stringboot-的-hello-world">StringBoot 的 Hello World</h1>
<h2 id="pom文件依赖配置">pom文件依赖配置</h2>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;org.example&lt;/groupId&gt;
    &lt;artifactId&gt;com.first&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;

    &lt;!--    spring Boot 依赖--&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;
    &lt;/parent&gt;

    &lt;!--    web场景依赖启动器,引入springMVC的相关依赖--&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/project&gt;
</code></pre>
<ul>
<li>spring-boot-starter-parent作用</li>
</ul>
<blockquote>
<p>它提供依赖管理（类比Android的话，作用类似于<a href="https://github.com/ben-manes/gradle-versions-plugin">ben-manes.versions</a>插件？？）引入之后，声明<strong>其管理范围内</strong>的依赖时不在需要填版本了</p>
</blockquote>
<ul>
<li>spring-boot-starter-web作用
<ul>
<li>spring-boot-starter-web:</li>
</ul>
<blockquote>
<p>默认使用嵌套式的TomCat作为Web容器对开开发HTTP服务</p>
</blockquote>
<ul>
<li>spring-boot-starter：</li>
</ul>
<blockquote>
<p>SpringBoot场景启动器，帮我们导入了web模块支出运行的组件</p>
</blockquote>
</li>
</ul>
<p><strong>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面 引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</strong></p>
<h2 id="applicationcontroller">Application&amp;Controller</h2>
<pre><code class="language-java">//Application
/**标记为主程序启动类**/
@SpringBootApplication
public class ManualChaptApplication {
  public static void main(String[] args) {
    SpringApplication.run(ManualChaptApplication.class);
  }
}
</code></pre>
<pre><code class="language-java">/**
 *Controller
 * 该注解为组合注解
 * @ResponseBody+Controller
 */
@RestController
public class HelloController {

  /**
   *GetMapping：相当于@RequestMapping(value=”/hello“，RequestMethod.Get)
   */
  @GetMapping(&quot;/hello&quot;)
  public String hello() {
    return &quot;hello World&quot;;
  }
}
</code></pre>
<h3 id="注解的意思">注解的意思：</h3>
<ul>
<li>@SpringBootApplication：<br>
标注在某个类上，说明此类为SpringBoot的主配置类，SpringBoot运行此类的Main方法来启动StringBoot应用，会将主配置类（@SpringBootApplication标注的类）的<strong>所在包及下面所有子包里面</strong>的所有组件扫描到 Spring容器；</li>
<li>@RestController<br>
此注解为组合注解，意味着这个controller上的所有方法上都加了@ResponseBody</li>
</ul>
<h2 id="单元测试">单元测试</h2>
<pre><code class="language-java">@SpringBootTest  
class DemoApplicationTests {

  @Autowired
  private HelloController helloController;


  @Test
  void contextLoads() {
    String hello = helloController.hello();
    System.out.println(&quot;print：  &quot; + hello);
  }
}
</code></pre>
<h3 id="注解的意思-2">注解的意思：</h3>
<ul>
<li>@SpringBootTest:<br>
标记springBoot单元测试，并加载项目的applicationContext的上下文环境</li>
<li>@Autowired<br>
它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。</li>
</ul>
<h2 id="springboot执行流程">SpringBoot执行流程</h2>
<ol>
<li>开始</li>
<li>初始化Spring Application的实例
<ul>
<li>判断当前项目的类型</li>
<li>应用的初始化设置</li>
<li>应用的监听设置</li>
<li>设置项目的启动类</li>
</ul>
</li>
<li>初始化Spring Boot项目的启动
<ul>
<li>获取并运行监听器</li>
<li>准备项目运行环境</li>
<li>应用上下文装配</li>
<li>启动上下文</li>
<li>运行自定义执行器</li>
<li>持续运行上下文</li>
</ul>
</li>
<li>结束</li>
</ol>
<h1 id="202039">2020/3/9</h1>
<h2 id="使用kotlin的注意事项">使用kotlin的注意事项</h2>
<ul>
<li>因为底层问题，所以部分类型的声明需要注意对Java的兼容</li>
</ul>
<pre><code class="language-kotlin">@JvmOverloads
    @GetMapping(&quot;/spica&quot;)
    fun spica() = &quot;spica 27&quot;

   @GetMapping(&quot;/spica/{name}&quot;)
    fun spica(
            @PathVariable(name = &quot;name&quot;)
            name: String? = &quot;spica&quot;) = &quot;&lt;h1&gt;name=${name.toString()}&lt;/h1&gt;&quot;
</code></pre>
<p>以下是今天碰见的问题：<br>
- 重写方法加@JvmOverloads注解<br>
- 类型声明要加？允许为null,如上直接使用String类型会报<code>java.lang.NoClassDefFoundError: kotlin/jvm/internal/Intrinsics</code></p>
<h2 id="单元测试junit4与junit-5对比">单元测试·JUnit4与JUnit 5对比</h2>
<p>常用注解及其作用对比：</p>
<table>
<thead>
<tr>
<th>JUnit4</th>
<th>JUnit5</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Test</td>
<td>@Test</td>
<td>表示该方法是一个测试方法。JUnit5与JUnit 4的@Test注解不同的是，它没有声明任何属性，因为JUnit Jupiter中的测试扩展是基于它们自己的专用注解来完成的。这样的方法会被继承，除非它们被覆盖</td>
</tr>
<tr>
<td>@BeforeClass</td>
<td>@BeforeAll</td>
<td>表示使用了该注解的方法应该在当前类中所有使用了@Test @RepeatedTest、@ParameterizedTest或者@TestFactory注解的方法之前 执行；</td>
</tr>
<tr>
<td>@AfterClass</td>
<td>@AfterAll</td>
<td>表示使用了该注解的方法应该在当前类中所有使用了@Test、@RepeatedTest、@ParameterizedTest或者@TestFactory注解的方法之后执行；</td>
</tr>
<tr>
<td>@Before</td>
<td>@BeforeEach</td>
<td>表示使用了该注解的方法应该在当前类中每一个使用了@Test、@RepeatedTest、@ParameterizedTest或者@TestFactory注解的方法之前 执行</td>
</tr>
<tr>
<td>@After</td>
<td>@AfterEach</td>
<td>表示使用了该注解的方法应该在当前类中每一个使用了@Test、@RepeatedTest、@ParameterizedTest或者@TestFactory注解的方法之后 执行</td>
</tr>
<tr>
<td>@Ignore</td>
<td>@Disabled</td>
<td>用于禁用一个测试类或测试方法</td>
</tr>
<tr>
<td>@Category</td>
<td>@Tag</td>
<td>用于声明过滤测试的tags，该注解可以用在方法或类上；类似于TesgNG的测试组或JUnit 4的分类。</td>
</tr>
<tr>
<td>@Parameters</td>
<td>@ParameterizedTest</td>
<td>表示该方法是一个参数化测试</td>
</tr>
<tr>
<td>@RunWith</td>
<td>@ExtendWith</td>
<td>@Runwith就是放在测试类名之前，用来确定这个类怎么运行的</td>
</tr>
<tr>
<td>@Rule</td>
<td>@ExtendWith</td>
<td>Rule是一组实现了TestRule接口的共享类，提供了验证、监视TestCase和外部资源管理等能力</td>
</tr>
<tr>
<td>@ClassRule</td>
<td>@ExtendWith</td>
<td>@ClassRule用于测试类中的静态变量，必须是TestRule接口的实例，且访问修饰符必须为public。</td>
</tr>
</tbody>
</table>
<h2 id="maven的格式">Maven的格式</h2>
<ul>
<li>依赖配置
<ul>
<li>groupId：标识符</li>
<li>artifactId ：单独的项目标识符</li>
<li>version：版本号</li>
<li>scope：任务的类路径及其如何限制依赖关系的传递性</li>
<li>exclusions：包含一个或多个排除元素，每个排除元素都包含一个表示要排除的依赖关系的 groupId 和 artifactId。与可选项不同，可能或可能不会安装和使用，排除主动从依赖关系树中删除自己。</li>
</ul>
</li>
</ul>
<pre><code class="language-xml"> &lt;dependencies&gt;
      &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;version&gt;2.0&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
            &lt;exclusions&gt;
                &lt;exclusion&gt;
                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;
                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;
                &lt;/exclusion&gt;
            &lt;/exclusions&gt;
        &lt;/dependency&gt;
    ...
  &lt;/dependencies&gt;
</code></pre>
<ul>
<li>build配置
<ul>
<li>plugins 插件
<ul>
<li>plugin
<ul>
<li>extensions：是否加载此插件的扩展名。</li>
<li>dependencies ：插件本身需要的依赖</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code class="language-xml">&lt;build&gt;
    &lt;plugins&gt;
&lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;compile&lt;/id&gt;
                        &lt;phase&gt;compile&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;compile&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                    &lt;execution&gt;
                        &lt;id&gt;testCompile&lt;/id&gt;
                        &lt;phase&gt;test-compile&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;testCompile&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            ... ...
    &lt;/plugins&gt;
  &lt;/build&gt;
</code></pre>
<h2 id="配置文件">配置文件</h2>
<ul>
<li>properties</li>
<li>yaml</li>
</ul>
<ol>
<li>基本格式要求：
<ol>
<li>YAML大小写敏感；</li>
<li>使用缩进代表层级关系</li>
<li>缩进只能使用空格，不能使用TAB，不要求空格个数，只需要相同层级左对齐（一般2个或4个空格）</li>
</ol>
</li>
<li>值的写法
<ol>
<li>普通的值：k:v</li>
<li>对象，Map：键值对
<ol>
<li>k: v：在下一行写对象的属性和值的关系；注意缩进</li>
<li>行内写法</li>
</ol>
</li>
</ol>
</li>
</ol>
<pre><code class="language-yaml">man:    
      name: jelly           
      age: 20 
</code></pre>
<pre><code class="language-yaml">man: {name: jelly,age: 18}
</code></pre>
<p>,<br>
3.  数组（List Set）<br>
一个短横代表一个数组项</p>
<pre><code class="language-yaml">people:
  - chengkeyu
  - zhaoqian
  - guzhaoyuan
  - yangweizhi
</code></pre>
<p>行内写法</p>
<pre><code class="language-yaml">people:[chengkeyu,zhaoqian,guzhaoyuan,yangweizhi]
</code></pre>
<p>随机值的使用</p>
<pre><code class="language-yml">${random.value}

随机生成一个32位的字符串，如：b21d56d2f10d74f84608dfff01b25552

${random.int}

随机生成一个int范围的随机数，如：-386223791

${random.long}

随机生成一个long范围的随机数，如：2404587442488649534

${random.int(10)}

随机生一个[0,10]之间的随机数，如：8

${random.int[1024,65536]}

随机生成一个[1024,65536]之间的随机数，如：63856

${user.userName}

获取配置文件中已经配置好的属性值，不存在时直接返回整个“${user.userName}”

${user.width:hello}

获取配置文件中已经配置好的属性值，不存在时则用&quot;hello&quot;返回


</code></pre>
<h3 id="示例">示例</h3>
<pre><code class="language-yml">user:
  lastName: hello
  age: 18
  boss: false
  birth: 2017/12/12
  maps: {qq: 1000 , mobile: 13811002233}
  lists: []
  dog:
    name: jelly
    age: 18

address: 上海${random.value}
</code></pre>
<pre><code class="language-properties">person.last-name=hello${user.lastName}

person.age=${random.int}

person.birth=2017/12/15

person.boss=false

person.maps.aa=v1

person.maps.bb=14

person.lists=a,b,c

person.dog.name=${person.hello:hello}_dog

person.dog.age=15
</code></pre>
<h3 id="指定bean对象java">指定bean对象(Java)</h3>
<pre><code class="language-java">//	指定配置文件
@PropertySource(value = {&quot;classpath:application.yaml&quot;})
//放入容器
@Component
//绑定
@ConfigurationProperties(prefix = &quot;user&quot;)
public class User {

private String lastName;

private Integer age;

private Boolean boss;

private Date birth;

private Map&lt;String, Object&gt; maps;

private List&lt;Object&gt; lists;

private Dog dog;

get...
seting..
}
</code></pre>
<h3 id="指定bean对象kotlin">指定bean对象(Kotlin)</h3>
<pre><code class="language-kotlin">@PropertySource(value = [&quot;classpath:application.yaml&quot;])
@Component
@ConfigurationProperties(prefix = &quot;user&quot;)
class User {
    var lastName: String? = null
    var age: Int? = null
    var isBoss = false
    var birth: Date? = null
    var maps: Map&lt;String, Any&gt;? = null
    var lists: List&lt;Any&gt;? = null
    var dog: Dog? = null
}
</code></pre>
<p>需要注意注解格式变化和添加？允许为空</p>
<h2 id="profile环境切换">Profile环境切换</h2>
<h3 id="多profile">多profile</h3>
<p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml 默认使用application.properties的配置；<br>
例如：<br>
application-dev.properties：开发环境 application-test.properties：测试环境 application-prod.properties：生产环境</p>
<h3 id="激活指定profile">激活指定profile</h3>
<ol>
<li>在配置文件中指定 spring.profiles.active=dev</li>
<li>命令行： java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev；可以直接在测试的时候，配置传入命令行参数</li>
<li>虚拟机参数； -Dspring.profiles.active=dev</li>
</ol>
<h1 id="2020216">2020/2/16</h1>
<h2 id="sping的ioc">Sping的IOC</h2>
<ul>
<li>Bean的基本概念:<br>
在计算机英语中，有可重用组件的意思<br>
JavaBean的概念大于等于实体类<br>
JavaBean：用Java编写的可重用的组件</li>
</ul>
<h2 id="依赖注入和控制反转">依赖注入和控制反转</h2>
<ul>
<li>基本概念：<br>
对象之间的关联通过对象的组合来实现，每个对象都依赖其他对象提供的各种服务<br>
Spring提供了IoC容器初始化Bean对象，解决了Bean对象间的依赖关系关系，以及Bean的对象使用问题，改变了传统的以<code>new</code>来创建对象的方式</li>
<li>控制反转：达成特性，由外部来创建对象，我们仅需要取出对象即可</li>
<li>依赖注入：实现手段</li>
</ul>
<h2 id="常用注解的意思">常用注解的意思</h2>
<ul>
<li>用于创建对象的
<ol>
<li>@Component
<ul>
<li>形式：@Component(value=&quot; &quot;)/@Component(&quot; &quot;)</li>
<li>作用：用于把当前类对象存入 Spring 容器中</li>
<li>属性：value : 用于指定 bean 的 id，当我们不写的时候，它的默认值是当前类名，且首字母改小写;当值只有一个的时候可以省略<br>
以下三个注解的作用与 @Component 完全一样，它们是 Spring 提供的更明确的划分，使三层对象更加清晰</li>
</ul>
</li>
<li>@Controller</li>
<li>@Service</li>
<li>@Repository</li>
</ol>
</li>
<li>用于注入数据的
<ol>
<li>@Autowired
<ul>
<li>作用：自动按照类型注入，只要容器中有唯一的一个 bean 对象类型和要注入的变量类型匹配， 就可以注入成功如果IOC容器中没有任何 bean 的类型和要注入的变量类型匹配，则报错</li>
<li>出现位置：可以是变量上，也可以是方法上</li>
<li>细节：在使用注解注入时，set 方法就不是必须的了</li>
</ul>
</li>
<li>@Qualifier
<ul>
<li>作用：在按照类型注入的基础上再按照名称注入，它在给类成员注入时不能单独使用，但是在给方法参数注入 时可以。</li>
<li>value : 用于指定注入的 bean 的 id</li>
</ul>
</li>
<li>@Resource
<ul>
<li>作用：直接按照 bean 的 id 注入，可以直接使用</li>
<li>属性：name : 用于指定 bean 的 id</li>
<li>等同于@Autowired+@Qualifier<br>
以上三个注入都只能注入其他 bean 类型的数据，而基本类型和 String 类型的数据无法使用上述注解实现。</li>
</ul>
</li>
<li>@Value
<ul>
<li>作用：用于注入基本类型和 String 类型的数据</li>
<li>属性：value : 用于指定数据的值，它可以使用 Spring 中 Spel (即spring的el表达式)</li>
</ul>
</li>
</ol>
</li>
</ul>
<p>Spel 的写法：${表达式}</p>
<ul>
<li>用于改变范围的
<ol>
<li>@Scope
<ul>
<li>作用：用于指定 bean 的作用范围</li>
<li>value : 指定范围的取值，同 xml 中值，常用为 singleton , prototype</li>
</ul>
</li>
<li>@PreDestory
<ul>
<li>作用：用于指定销毁方法</li>
</ul>
</li>
<li>@Postcontrust
<ul>
<li>作用：用于指定初始化方法</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="使用配置类">使用配置类</h2>
<h3 id="常用注解">常用注解</h3>
<ul>
<li>@Configuration：声明配置类，从指定类中读取@Bean标记的方法用来创建bean</li>
<li>@Scope：工厂的创建模式：单例或者多例</li>
<li>@Lazy：是否懒加载，非懒加载就是容器启动就加载，默认为True</li>
<li>@Bean：声明一个Bean</li>
<li>@Profile：容器允许的配置文件</li>
<li>@Value：同上</li>
</ul>
<pre><code class="language-java">//声明为一个配置类
@Configuration
public class ConfigBeans {
  //声明单例还是原型
  @Scope(value = ConfigurableBeanFactory.SCOPE_SINGLETON)
  //是否为懒加载。默认为懒加载就是容器启动后就直接创建实例  
  @Lazy(value = false)
  //声明bean的信息等同于xml的方式  
  @Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)
  public ZooService zooService() {
    return new ZooService();
  }
}
@SpringBootApplication
public class ConfigApplication {
  //声明为非web应用，只要加载容器即可
  public static void main(String[] args) {
      new SpringApplicationBuilder()
          .web(WebApplicationType.NONE)
          .sources(ConfigApplication.class)
          .run(args);
  }
}

</code></pre>
<h2 id="aop面向切面编程">Aop面向切面编程</h2>
<ol>
<li>
<p>什么是AOP?</p>
<p>在单体架构下的软件开发中，一个大型项目通常是依照功能拆分成各个模块。但是如日志、安全和事务管理此类重要且繁琐的开发却没有必要参与到各个模块中，将这些功能与业务逻辑相关的模块分离就是面向切面编程所要解决的问题<br>
<em><strong>AOP采取的是横向抽取机制，取代了传统纵向继承体系重复性代码。</strong></em></p>
</li>
<li>
<p>那么何为软件的横向和纵向？<br>
从纵向结构来看就是我们软件的各个模块，它所负责的是软件的核心业务（如购商品购买、添加购物车等）；从横向来看的话，软件的各个模块之间又有所关联，其中会包含一些公共模块（例如日志、权限等）；这些公共模块可以存在于各个核心业务中，而AOP的处理将两者分离，使开发人员可以专注于核心业务的开发，提高了开发效率。</p>
</li>
<li>
<p>AOP 的作用及优势</p>
<ul>
<li>作用： 在程序运行期间，不修改源码对已有方法进行增强</li>
<li>优势： 减少重复代码 提高开发效率 维护方便</li>
</ul>
</li>
<li>
<p>AOP底层原理</p>
<ul>
<li>使用动态代理实现</li>
<li>基于JDK的代理:适用于有接口情况，使用动态代理创建接口实现类代理对象</li>
<li>基于CGLIB动态代理:适用于没有接口情况，使用动态代理创建类的子类代理对象</li>
</ul>
</li>
</ol>
<h3 id="aop术语">AOP术语</h3>
<ul>
<li>Advice (通知/增强):通知是指拦截到 Joinpoint 之后所要做的事情就是通知。 通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知。</li>
<li>Joinpoint (连接点):所谓连接点是指那些被拦截到的点。在 Spring 中,这些点指的是方法,因为 Spring 只支持方法类型的 连接点。</li>
<li>Pointcut (切入点):所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。</li>
<li>Introduction (引介): 引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方 法或 Field。</li>
<li>Target(目标对象): 代理的目标对象。</li>
<li>Weaving (织入): 是指把增强应用到目标对象来创建新的代理对象的过程。 Spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装载期织入。</li>
<li>Proxy(代理):一个类被 AOP 织入增强后，就产生一个结果代理类。 Aspec t(切面): 是切入点和通知（引介）的结合。</li>
</ul>
<h3 id="aspect">Aspect</h3>
<pre><code class="language-java">@Aspect
@Component
public class MyAspect3 {

  @Before(value = &quot;execution(* com.example.aopdemotest1.dao.UserDaoImpl.*(..))&quot;)
  public void before() {
    System.out.println(&quot;前置通知&quot;);
  }


  @AfterReturning(value = &quot;execution(* com.example.aopdemotest1.dao.UserDaoImpl.*(..))&quot;, returning = &quot;result&quot;)
  public void afterReturn(Object result) {
    System.out.println(&quot;后置通知&quot; + result);
  }


  @Around(value = &quot;execution(* com.example.aopdemotest1.dao.UserDaoImpl.deleteUser(..))&quot;)
  public Object around(ProceedingJoinPoint joinPoint) throws Throwable {
    System.out.println(&quot;环绕前通知&quot;);
    Object object = joinPoint.proceed();
    System.out.println(&quot;环绕后通知&quot;);
    return object;
  }


  @AfterThrowing(value = &quot;execution(* com.example.aopdemotest1.dao.UserDaoImpl.*(..))&quot;, throwing = &quot;e&quot;)
  public void afterThrowing(Throwable e) {
    System.out.println(&quot;异常：&quot; + e.getMessage());
  }


  @After(value = &quot;execution(* com.example.aopdemotest1.dao.UserDaoImpl.deleteUser(..))&quot;)
  public void after() {
    System.out.println(&quot;最后通知&quot;);
  }
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写了一个demo]]></title>
        <id>https://yangspica27.github.io/post/xie-liao-yi-ge-demo/</id>
        <link href="https://yangspica27.github.io/post/xie-liao-yi-ge-demo/">
        </link>
        <updated>2020-03-04T02:08:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="类似一言的一个app">类似一言的一个App</h2>
<ul>
<li>架构基于MVVM&amp;MVP</li>
<li>并发使用的协程与Retrofit</li>
<li>不喜轻喷</li>
<li>开源地址：<a href="https://github.com/yangSpica27/TodayHistory.git">地址</a></li>
<li>预览图<br>
-<img src="https://yangspica27.github.io//post-images/1583287937393.gif" alt="" loading="lazy"></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android App 启动优化全记录]]></title>
        <id>https://yangspica27.github.io/post/android-app-qi-dong-you-hua-quan-ji-lu/</id>
        <link href="https://yangspica27.github.io/post/android-app-qi-dong-you-hua-quan-ji-lu/">
        </link>
        <updated>2020-02-18T03:48:24.000Z</updated>
        <content type="html"><![CDATA[<p>原作者：Gracker<br>
本文参考了目前大部分 Android 应用启动优化的方案，将大家的方案做一个汇总，如果你有这方面的需求，只需要对照这篇文章，看看其他人的方案，查漏补缺。很多方案是要根据具体的业务去做优化的，所以这里也没有对每一种方案进行详细的介绍，要用到哪一个方案的时候，可以具体去网上查找对应方案的具体实现方法，这里只是做一个汇总</p>
<p>另外我还加上了部分系统厂商所做的启动相关的优化，不过只写了一些我知道的，还有一些厂商有黑科技，就不在这里的讨论范围了。知道厂商做的事情，可能也会帮助到你，比如联系厂商做白名单、接入厂商 SDK 等</p>
<h1 id="应用启动概述">应用启动概述</h1>
<h2 id="应用启动的一般流程">应用启动的一般流程</h2>
<p>应用的启动，从桌面点击应用图标到主界面用户可操作，大致遵循下面的流程：<br>
<img src="https://yangspica27.github.io//post-images/1581997864059.jpg" alt="" loading="lazy"><br>
应用的启动，从桌面点击应用图标到主界面用户可操作，大致遵循下面的流程：</p>
<ul>
<li>SystemServer 负责应用的启动流程调度、进程的创建和管理、窗口的创建和管理(StartingWindow 和 AppWindow) 等</li>
<li>应用进程被 SystemServer 创建后，进行一系列的进程初始化、组件初始化(Activity、Service、ContentProvider、Broadcast)、主界面的构建、内容填充等</li>
</ul>
<h2 id="冷启动和热启动">冷启动和热启动</h2>
<p>各家应该都有自己的方案，关键在于如何定义启动结束的点，这个也是一直困扰我的一个地方，有的应用很好定义，有的应用则因为比较复杂，无法直接衡量启动速度。像 adb 这种方法自己玩玩可以，生产环境没啥用；录屏本身就有性能损耗..</p>
<p>这里我建议大家学习<a href="https://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;mid=2650403370&amp;idx=1&amp;sn=b4297b138eb7f73c95a6279c3458f025&amp;chksm=83953a32b4e2b3247fc18cbee08a2682d8b09720a1c5fef0c36257ae92b1e201cb1ad3125455&amp;mpshare=1&amp;scene=1&amp;srcid=#rd">历时1年，上百万行代码！首次揭秘手淘全链路性能优化（上）</a>中提到的测量方法：自动化、稳定、持续集成</p>
<blockquote>
<p>通过OCR提取图片中的文字信息作为关键特征。该算法的优势：1. 在于应用页面上基本都是有文字的， OCR也可以识别到图片上的文字， 文字出现则图片加载完成， 和用户体感是一致的；2. 文字作为特征，过滤掉了很多图片特征可能带来的噪声， 减少了算法调试的工作量；另外阿里集团内有非常成熟和优秀的OCR服务——读光，文档识别率超过99.7%， 使用水滴平台封装的OCR服务，可以快速接入和使用。最终的识别方案就是基于OCR识别来进行的</p>
</blockquote>
<h1 id="app-优化">App 优化</h1>
<h2 id="启动窗口优化">启动窗口优化</h2>
<p>启动窗口，也叫启动页、SplashWindow、StartingWindow 等，指的是应用启动时候的预览窗口。iOS App 强制有一个启动页，用户点击桌面 App 图标之后，系统会立即显示这个启动窗口，等 App 主页加载好之后再显示主页面。Android 也有类似的机制 (启动窗口这个是 Android 系统提供的)，但是也提供了一个接口，让应用开发者设置是否显示这个启动窗口(默认是显示)，部分开发者会把这个系统提供的启动窗口禁掉，启动自己的窗口。</p>
<p>但是启动自己的窗口需要的时间要比直接显示系统的启动窗口所花的时间要长，这就会导致用户在使用的时候，点击图标启动 App 的时候，有一定的延迟，表现在点击图标过了一段时间才进行窗口动画进入 App，我们要尽量避免这种情况:</p>
<ul>
<li>不要禁止系统默认的启动窗口：即不要在主题里面设置 android:windowDisablePreview 为 true</li>
<li>自己定制启动窗口的内容，比如将启动页主题背景设置成闪屏页图片，或者尽量使闪屏页面的主题和主页一致。可以参考知乎、抖音的做法</li>
<li>合并闪屏和主页面的 Activity ：微信的做法，不过由于微信设置了 android:windowDisablePreview ， 且他在各个厂商的白名单里面，一般不会被杀，冷启动的机会比较少。不过也是一个可以思考的地方</li>
</ul>
<h2 id="线程优化">线程优化</h2>
<p>线程优化主要是减少 CPU 调度带来的波动，让启动时间更稳定。如果启动过程中有太多的线程一起启动，会给 CPU 带来非常大的压力，尤其是比较低端的机器。过多的线程同时跑会让主线程的 Sleep 和 Runnable 状态变多， 增加了应用的启动速度，优化的过程中要注意：</p>
<ul>
<li>控制线程数量 – 线程池</li>
<li>检查线程间的锁 ，防止依赖等待</li>
<li>使用合理的启动架构
<ul>
<li>微信内部使用的 mmkernel</li>
<li>阿里 Alpha</li>
</ul>
</li>
</ul>
<h2 id="系统调度优化">系统调度优化</h2>
<p>应用启动的时候，如果主线程的工作过多，也会造成主线程过于繁忙，下面几个系统调度相关的点需要注意：</p>
<ul>
<li>启动过程中减少系统调用，避免与 AMS、WMS 竞争锁。启动过程中本身 AMS 和 WMS 的工作就很多，且 AMS 和 WMS 很多操作都是带锁的，如果此时 App 再有过多的 Binder 调用与 AMS、WMS 通信，SystemServer 就会出现大量的锁等待，阻塞关键操作</li>
<li>启动过程中不要启动子进程，如果好几个进程同时启动，系统负担则会加倍，SystemServer 也会更繁忙</li>
<li>启动过程中除了 Activity 之外的组件启动要谨慎，因为四大组件的启动都是在主线程的，如果组件启动慢，占用了 Message 通道，也会影响应用的启动速度</li>
<li>Application 和主 Activity 的 onCreate 中异步初始化某些代码<br>
启动过程中繁忙的 cpu:<br>
<img src="https://yangspica27.github.io//post-images/1581998332511.jpg" alt="" loading="lazy"><br>
启动过程中繁忙的 SystemServer:<br>
<img src="https://yangspica27.github.io//post-images/1581998356703.jpg" alt="" loading="lazy"></li>
</ul>
<h2 id="gc-优化">GC 优化</h2>
<p>启动过程中减少 GC 的次数</p>
<ul>
<li>避免进行大量的字符串操作，特别是序列化和反序列化</li>
<li>频繁创建的对象需要考虑复用</li>
<li>转移到 Native 实现<br>
可以参考下面这篇文章<a href="https://juejin.im/post/5be1077d518825171140dbfa"> 支付宝客户端架构解析：Android 客户端启动速度优化之「垃圾回收」</a></li>
</ul>
<h2 id="io-优化">IO 优化</h2>
<p>启动过程中负载比较高，有许多系统 IO 都在此时发生，这时候 IO 的性能下降会比较快，此时 App 中的 IO 操作会比平时更慢一些，尤其是在性能比较差的机器上。</p>
<p>IO 分网络 IO 和磁盘 IO ，启动过程中不建议进行网络 IO ，对于磁盘 IO 则要细扣，邵文在高手课里面有讲到：</p>
<ol>
<li>我们要清楚启动过程中读了什么文件、多少个字节、 Buffer 是多大，使用了多长时间、在什么线程等一系列信息</li>
<li>进行启动过程中的 IO 监控，微信在监控 IO 时发现有用户的 db 文件达到了 500MB<br>
<img src="https://yangspica27.github.io//post-images/1581998558785.jpg" alt="" loading="lazy"><br>
下面图中可以看到低内存的时候，启动应用主线程有较多的 IO 等待（UI Thread 这一栏，橘红色代表 IO 等待 ）<br>
<img src="https://yangspica27.github.io//post-images/1581998574938.jpg" alt="" loading="lazy"><br>
<img src="https://yangspica27.github.io//post-images/1581998580042.jpg" alt="" loading="lazy"></li>
</ol>
<h2 id="资源重排">资源重排</h2>
<p>利用 Linux 的 IO 读取策略，PageCache 和 ReadAhead 机制，按照读取顺序重新排列，减少磁盘 IO 次数 。具体操作可以参考支付宝 App 构建优化解析：通过安装包重排布优化 Android 端启动性能 这篇文章</p>
<p>Linux 底层文件系统中 VFS 上次 App 进程之间，存在一层 pagecache，pagecache 由内存中的物理 page 组成，其内容对应磁盘上的 block。Pagecache 的大小是动态变化的，可以扩大，也可以在内存不足时缩小。Cache 缓存的存储设备被称为后备存储（backing store），一个 page 通常包含多个 block，这些 block 不一定是连续的<br>
<img src="https://yangspica27.github.io//post-images/1581998744225.jpg" alt="" loading="lazy"><br>
利用文件重布局结合Pagecache 机制可以减少启动过程中的真正 IO 的次数，简单的说，通过文件重布局的目的，就是将启动阶段需要用到的文件在 APK 文件中排布在一起，尽可能的利用 pagecache 机制，用最少的磁盘 IO 次数，读取尽可能多的启动阶段需要的文件，减少 IO 开销，从而达到提升启动性能的目的</p>
<h2 id="类重排">类重排</h2>
<p>类重排的实现通过 ReDex 的 Interdex 调整类在 Dex 中的排列顺序。Interdex 优化不需要去分析类引用，它只需要调整 Dex 中类的顺序，把启动时需要加载的类按顺序放到主 dex 里，这个工作我们完全可以在编译过程中实现，而且这个优化可以提升启动速度，优化效果从 facebook 公布的数据来看也比较可观，性价比高。具体实现可以参考 <a href="https://www.androidperformance.com/2019/11/18/Android-App-Lunch-Optimize/#%E5%8E%82%E5%95%86%E4%BC%98%E5%8C%96">Redex 初探与 Interdex：Andorid 冷启动优化</a></p>
<h2 id="主页面布局优化">主页面布局优化</h2>
<p>应用主界面布局优化是老生常谈了，综合起来无非就是下面两点，这个需要结合具体的界面布局去做优化，网上也有比较多的资料可以查阅</p>
<ul>
<li>通过减少冗余或者嵌套布局来降低视图层次结构</li>
<li>用 ViewStub 替代在启动过程中不需要显示的 UI 控件</li>
<li>使用自定义 View 替代复杂的 View 叠加</li>
</ul>
<h2 id="闲时调用">闲时调用</h2>
<p>IdleHandler：当 Handler 空闲的时候才会被调用，如果返回 true, 则会一直执行，如果返回 false，执行完一次后就会被移除消息队列。比如，我们可以将从服务器获取推送 Token 的任务放在延迟 IdleHandler 中执行，或者把一些不重要的 View 的加载放到 IdleHandler 中执行</p>
<h2 id="类加载优化">类加载优化</h2>
<p>可以在 systrace 生成的文件中看到 verifyClass 过程，因为需要校验方法的每一个指令，所以是一个比较耗时的操作。<br>
<img src="https://yangspica27.github.io//post-images/1581998891883.jpg" alt="" loading="lazy"></p>
<h2 id="app-瘦身">App 瘦身</h2>
<p>App 瘦身包括代码瘦身和资源瘦身，通常的做法如下：</p>
<ul>
<li>Inspect Code ：Android Studio 提供的代码审查工具，实际上是内嵌了 Lint</li>
<li>代码混淆</li>
<li>图片格式的选择：如果对图片的要求不高，可以换成 565</li>
<li>接入资源混淆</li>
<li>减少 Dex 数量</li>
</ul>
<h2 id="选择合适的启动框架">选择合适的启动框架</h2>
<p>启动优化整个流程的梳理，流程的梳理，我们这里引入了一个有向无环图的概念，我们会把整个的概念梳理成有向无环图的结构，然后会去挨个加载。右边的部分，可以看到我们其实在启动的时候，首先会去加载一些必要的启动项，必要的启动项是左边流程，会用一个多进程的方式加载，以来有向无环图进行控制，比如说我是在非必须的时候启动加载我可以放在后面再去加载。当然在整个有向无环图的顺序加载，其实还是会做一些进程的判断，要判断某些项目是不是要在主进程里加载，某些要在初始进程里面加载</p>
<p>从 Spark 的 DAGScheduler 中领悟到它的核心思想，面向阶段调度（Stage-Oriented Scheduler）：把应用划分成一个个的阶段（Stage），再把任务（Task）安排到各个阶段中去，任务的编排则是通过构建 有向无环图（DAG），把任务依赖通过图的方式梳理得 井井有条。因为它分阶段执行，先集中资源把阶段一搞定，再齐心协力去执行阶段二，这样即能控制拥塞，又能保证时序，还能并发执行，让设备性能尽可能得到发挥<br>
<img src="https://yangspica27.github.io//post-images/1581999010199.jpg" alt="" loading="lazy"></p>
<p>大家可以参考淘宝的全链路优化的案例：<a href="https://yq.aliyun.com/articles/710466">历时1年，上百万行代码！首次揭秘手淘全链路性能优化（上）</a></p>
<h2 id="启动网络链路优化">启动网络链路优化</h2>
<h3 id="问题和优化点">问题和优化点</h3>
<ul>
<li>发送处理阶段：网络库bindService影响前x个请求，图片并发限制图片库线程排队</li>
<li>网络耗时：部分请求响应size大，包括 SO文件，Cache资源，图片原图大尺寸等</li>
<li>返回处理：个别数据网关请求json串复杂解析严重耗时（3s）,且历史线程排队设计不合适</li>
<li>上屏阻塞：回调UI线程被阻，反映主线程卡顿严重。高端机达1s，低端机恶化达3s以上</li>
<li>回调阻塞：部分业务回调执行耗时，阻塞主线程或回调线程</li>
</ul>
<h3 id="优化">优化</h3>
<ul>
<li>多次重复的请求，业务方务必收敛请求次数，减少非必须请求。</li>
<li>数据大的请求如资源文件、so文件，非启动必须统一延后或取消。</li>
<li>业务方回调执行阻塞主线程耗时过长整改。我们知道，肉眼可见流畅运行，需要运行60帧/秒， 意味着每帧的处理时间不超过16ms。针对主线程执行回调超过16ms的业务方，推动主线程执行优化。</li>
<li>协议json串过于复杂导致解析耗时严重，网络并发线程数有限，解析耗时过长意味着请求长时间占用MTOP线程影响其他关键请求执行。推动业务方handler注入使用自己的线程解析或简化json串。</li>
</ul>
<h2 id="预加载">预加载</h2>
<p>Activity 打开之前就预加载数据，在 Activity 的 UI 布局初始化完成后显示预加载的数据，大大缩短启动时间。 可以参考<a href="https://github.com/luckybilly/PreLoader/blob/master/README-zh-CN.md">此篇文章</a></p>
<h2 id="保活">保活</h2>
<p>保活，是各个应用开发者的噩梦，也是 Android 厂商关注和打击的重点。不过从启动的角度来看，如果应用进程不被杀，那么启动自然就快了，所以保活对应用启动速度也是有极大的帮助。</p>
<p>当然这里说的保活，并不是建议大家用各种黑科技、相互唤醒、通知轰炸这种保活手段，而是提供真正的功能，能让用户觉得你在后台是合理的、可以接收的。比如在后台的时候，资源能释放的都释放掉，不要一直在后台做耗电操作，该停的服务停掉，该关的动画关掉。</p>
<p>当然对于应用开发者来说，上面说的都太多理想化了，而且目前的手机厂商也会很暴力，应用到了后台就会处理掉，不过这毕竟是一个方向，Google 也在规范应用后台行为和规范厂商处理应用这两方面都在做努力，Android 系统的生态，还是需要应用开发者和 Android 厂商一起取改善。</p>
<p>当然保活还有一条路就是走跟厂商的合作，优化后台内存、去掉重复拉起、去掉流氓逻辑、积极响应低内存警告，做好这些话后可以跟系统厂商联系，谈放到查杀白名单和自启动白名单的可行性</p>
<h2 id="业务梳理">业务梳理</h2>
<p>这里涉及到具体的业务，每个 App 都不一样，但是所要做的事情都是一样的，下面是邵文在高手课里面提到的：</p>
<ul>
<li>梳理清楚启动过程中的每一个模块，哪些是一定需要的，那些是可以砍掉，那些是可以懒加载的</li>
<li>根据不同的业务场景决定不同的启动模式</li>
<li>懒加载防止集中化<br>
可以把具体的业务分为下面四个维度：</li>
<li>必要且耗时：启动初始化，考虑用线程来初始化</li>
<li>必要不耗时：首页绘制</li>
<li>非必要但耗时：数据上报、插件初始化</li>
<li>非必要不耗时：不用想，这块直接去掉，在需要用的时再加载</li>
</ul>
<p>然后按需进行加载优化<br>
<img src="https://yangspica27.github.io//post-images/1581999424068.jpg" alt="" loading="lazy"></p>
<h2 id="业务优化">业务优化</h2>
<ol>
<li>
<p>优化业务中的代码效率，抓大放小，先从比较明显的瓶颈处下手，逐步进行优化</p>
</li>
<li>
<p>历史债务要偿还，历史的代码要重构，不能一直拖着</p>
</li>
<li>
<p>具体的业务会有具体的优化场景，大家可以参考<a href="https://www.jianshu.com/p/f5514b1a826c">这篇文章中的优化流程和优化项</a></p>
</li>
<li>
<p>数据库及IO操作都移到工作线程，并且设置线程优先级为THREAD_PRIORITY_BACKGROUND，这样工作线程最多能获取到10%的时间片，优先保证主线程执行</p>
</li>
<li>
<p>流程梳理，延后执行；实际上，这一步对项目启动加速最有效果。通过流程梳理发现部分流程调用时机偏失等， 例如</p>
<ol>
<li>更新等操作无需在首屏尚未展示就调用，造成资源竞争</li>
<li>调用了IOS为了规避审核而做的开关，造成网络请求密集</li>
<li>自有统计在Application的调用里创建数量固定为5的线程池，造成资源竞争</li>
<li>修改广告闪屏逻辑为下次生效</li>
</ol>
</li>
<li>
<p>去掉用无但被执行的老代码</p>
</li>
<li>
<p>去掉开发阶段使用但线上被执行的代码</p>
</li>
<li>
<p>去掉重复逻辑执行代码</p>
</li>
<li>
<p>去掉调用三方SDK里或者Demo里的多余代码</p>
</li>
<li>
<p>信息缓存，常用信息只在第一次获取，之后从缓存中取</p>
</li>
<li>
<p>项目是多进程架构，只在主进程执行Application的onCreate()</p>
</li>
</ol>
<h2 id="减少activity的跳转层次">减少Activity的跳转层次</h2>
<p>StartingWindow 会在用户点击 App 后立即创建并显示(前提是 App 没有禁止 StartingWindow)，在 AppWindow 创建好之后，StartingWindow 消失，AppWindow 显示</p>
<h3 id="默认-app-的启动窗口流程">默认 App 的启动窗口流程</h3>
<pre><code>StartingWindow(SystemWindow)
-&gt;MainActivity(AppWindow)
</code></pre>
<h3 id="大部分三方-app-启动流程">大部分三方 App 启动流程</h3>
<pre><code>StartingWindow(SystemWindow) 
  -&gt; SplashActivity(AppWindow)
    -&gt; MainActivity(AppWindow)
</code></pre>
<h3 id="糟糕一点的启动流程是这样的">糟糕一点的启动流程是这样的</h3>
<pre><code>StartingWindow(SystemWindow) 
  -&gt; MainActivity(AppWindow) 
    -&gt; SplashActivity(AppWindow)
      -&gt; MainActivity(AppWindow)
</code></pre>
<h3 id="更糟糕一点的启动流程去掉了-startingwindow">更糟糕一点的启动流程：去掉了 StartingWindow</h3>
<pre><code>SplashActivity(AppWindow)
   -&gt; MainActivity(AppWindow)
</code></pre>
<p>其实对用户来说，第一种启动流程是最好的，只涉及到一次窗口的切换；但是部分 App 由于广告页的需求，会使用第二种流程 ；但是尽量不要使用第三种和第四种启动流程，体验非常不好</p>
<h1 id="厂商优化">厂商优化</h1>
<p>除了 App 自身的优化之外，Android 框架对应用启动也是非常关注的，做了比较多的优化，下面简单说一下思路，各个厂商的实现也不太一样，但是基本上都会有，有些是硬核代码优化，有的是利用系统策略做优化。</p>
<p>厂商的策略各不相同，这里只是简单的提一下思路</p>
<h2 id="启动加速">启动加速</h2>
<p>App 启动的时候，系统会对要启动的应用做绝对的资源倾斜，比如 CPU、IO、GPU 等，这一点大家抓个 Systrace 看一下即可，不管是频率还是调度算法，正在启动的 App 绝对是当时的系统 VIP 客户<br>
<img src="https://yangspica27.github.io//post-images/1581999977671.jpg" alt="" loading="lazy"><br>
部分厂商也提供了资源调度的 SDK ，应用可以接入这些 SDK，在需要资源的时候直接调用 SDK 获取</p>
<h2 id="prefork">PreFork</h2>
<p>Android Q 加入了 PreFork 机制，会先 fork 几个空进程，当 App 启动的时候，可以直接复用这几个空进程，而不用重新去 fork</p>
<pre><code>2,348K: usap32 (pid 18731)
2,346K: usap32 (pid 18702)
2,343K: usap32 (pid 18707)
2,342K: usap32 (pid 18729)
2,341K: usap32 (pid 18711)
2,335K: usap32 (pid 20322)
2,335K: usap32 (pid 20325)
2,333K: usap32 (pid 20319)
2,333K: usap32 (pid 20320)
2,333K: usap32 (pid 20321)


1,509K: usap64 (pid 21169)
1,509K: usap64 (pid 21180)
1,507K: usap64 (pid 21171)
1,452K: usap64 (pid 21513)
1,450K: usap64 (pid 21506)
1,449K: usap64 (pid 21512)
1,447K: usap64 (pid 21511)
1,445K: usap64 (pid 21514）
</code></pre>
<h2 id="启动消息重排">启动消息重排</h2>
<p>启动的时候，对启动过程中的 Message 进行重新排列</p>
<h2 id="主线程-渲染线程加速">主线程、渲染线程加速</h2>
<p>部分厂家会对启动过程 App 的主线程和渲染线程做特殊对待，比如让他们直接跑到大核上，将其他不重要的线程移到小核</p>
<h2 id="启动预测">启动预测</h2>
<p>部分场景会针对用户的使用习惯进行学习，比如在什么时间、什么场合、什么交通工具打开手机，系统会预测你要启动的 App，并在后台进行启动，这样你点击这个 App 的时候，就已经是热启动了</p>
<h2 id="后台保活">后台保活</h2>
<p>系统也会对一些应用进行特殊处理，以提升用户体验：包括但不限于 进程\线程优先级调整、查杀白名单、用户常用应用记录等，进行适当的后台保活，下次启动的时候就是热启动了</p>
<h2 id="后台重启">后台重启</h2>
<p>系统会对一些应用进行特殊处理，比如这个 App 比较重要但是不能杀掉，那么有的厂商会在这种应用退到后台之后，进行无感重启：比如说某个应用内存超标或者持续 Crash ，后台重启可以很好地解决这个问题，这样重启后的 App 是用户点击启动的时候就是热启动</p>
<h2 id="内存优化">内存优化</h2>
<p>部分应用启动的时候，需要大量的内存，比如现在的相机启动，这时候如果没有足够的内存，那么系统必须要通过杀掉很多应用、释放 Cache 等操作来给这个 App 让路，这个过程会使得这些大内存的 App 在启动的时候频繁进行内存操作，导致启动速度变慢</p>
<p>部分厂商会在监测到这种大内存 App 启动的时候，提前做内存的回收操作，这样在启动的时候，就有了足够的内存给这个 App 使用</p>
<h2 id="优化启动逻辑">优化启动逻辑</h2>
<p>Android 系统更新也会对应用启动速度进行优化，比如上面提到的 Pre-Fork，又比如这里的简化 doFrame 个数<br>
<img src="https://yangspica27.github.io//post-images/1582000182751.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[进程和线程学习笔记]]></title>
        <id>https://yangspica27.github.io/post/jin-cheng-he-xian-cheng-xue-xi-bi-ji/</id>
        <link href="https://yangspica27.github.io/post/jin-cheng-he-xian-cheng-xue-xi-bi-ji/">
        </link>
        <updated>2020-02-11T11:16:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="进程">进程</h2>
<ul>
<li>给每个程序提供的独立封闭的环境，里面有各种资源和线程</li>
</ul>
<h2 id="区别">区别</h2>
<ul>
<li>同进程下的线程可以共享资源，进程之间无法直接共享资源</li>
</ul>
<h2 id="使用thread类来定义工作">使用Thread类来定义工作</h2>
<pre><code class="language-java">    Thread thread=new Thread(){
      @Override public void run() {
        super.run();
        //工作内容
      }
    };
</code></pre>
<h2 id="使用runable来定义工作">使用Runable来定义工作</h2>
<pre><code class="language-java">    Runnable runnable =
        new Runnable() {
          @Override
          public void run() {

            while (flag) {}
          }
        };
        Thread thread=new Thread(runnable);
</code></pre>
<h2 id="工厂方法">工厂方法</h2>
<pre><code class="language-java"> ThreadFactory threadFactory=new ThreadFactory() {
      int count=1;
      @Override public Thread newThread(@NonNull Runnable r) {
        count++;
        return new Thread(r,count+&quot;&quot;);
      }
    };
    
    Thread thread=threadFactory.newThread(runnable);
</code></pre>
<h2 id="executor">Executor</h2>
<pre><code class="language-java"> Executor executor = Executors.newCachedThreadPool();
    executor.execute(runnable);
</code></pre>
<ul>
<li>newCachedThreadPool()<br>
初始0个线程，可以不断添加，用完后线程会暂时缓存，过段时间之后会回收</li>
<li>newSingleThreadExecutor();<br>
只能跑一个线程，放多个会排队进行</li>
<li>Executors.newFixedThreadPool(5);<br>
只能跑限定个数的线程，需要自己做资源回收<br>
<code>((ExecutorService)executor).shutdown();</code></li>
</ul>
<h2 id="callable-可以看作有返回值的runnable">Callable (可以看作有返回值的Runnable)</h2>
<pre><code class="language-java">Callable&lt;String&gt; callable=new Callable&lt;String&gt;() {
    @Override public String call() throws Exception {
      return &quot;string&quot;;
    }
  };
  ExecutorService executor=Executors.newCachedThreadPool();
  Future&lt;String&gt; future=executor.submit(callable);
  String result=future.get();
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP学习笔记2]]></title>
        <id>https://yangspica27.github.io/post/http-xue-xi-bi-ji-2/</id>
        <link href="https://yangspica27.github.io/post/http-xue-xi-bi-ji-2/">
        </link>
        <updated>2020-02-11T06:58:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="编码加密hash">编码，加密，Hash</h1>
<h2 id="加密">加密</h2>
<ul>
<li>对称加密
<ul>
<li>原理：使用密钥和加密算法对数据进行转换，得到的无意义的数据即为密文。使用密钥和解密算法对密文进行逆向转换，得到原数据。</li>
<li>经典算法：AES DES</li>
</ul>
</li>
<li>非对称加密
<ul>
<li>原理使用公钥对数据进行加密得到密文，使用私钥对数据解密得到原数据</li>
<li>经典算法：RSA DSA</li>
<li>衍生用途：数字签名<br>
原数据---加密算法+加密密钥===&gt;密文---加密算法+解密密钥===&gt;原数据</li>
</ul>
</li>
<li>密钥（key）
<ul>
<li>场景：用于加密和解密</li>
<li>目的：保证数据被人截取时不被人读懂</li>
<li>焦点：数据</li>
</ul>
</li>
<li>密码（pasword）
<ul>
<li>场景：用户进入网站或者游戏的身份验证</li>
<li>目的：数据提供方或者应用服务方对账户拥有者的数据的保护，保证<strong>你是你</strong>的时候提供权限</li>
<li>焦点：身份</li>
</ul>
</li>
</ul>
<h2 id="base64">Base64</h2>
<ul>
<li>将二进制数据转化为64个字符组成的字符串的编码算法</li>
<li>用途：让原数据拥有字符串所拥有的特性，如可以放在URL中传播，可以保存到文本文件，可以通过普通聊天软件进行文本传输。</li>
<li>可以将人眼可读的字符串变为读不懂的字符串，降低窥视危险</li>
</ul>
<h2 id="url-encoding">URL Encoding</h2>
<ul>
<li>将URL中的保留字符使用百分号”%“进行编码（”+“，”/“，&quot;&amp;&quot;等）</li>
<li>消除歧义避免解析错误
<ul>
<li>例: http://spica.com/user/?name=我&amp;你<br>
👇<br>
http://spica.com/user/?name=我&amp;26你</li>
</ul>
</li>
</ul>
<h2 id="压缩和解压缩">压缩和解压缩</h2>
<ul>
<li>
<p>压缩：把数据换一种方式来存储，减少存储空间</p>
</li>
<li>
<p>解压缩：把压缩后的数据还原为原先的形式，以便使用</p>
</li>
<li>
<p>常见压缩算法：DEFLATE,JPEG,MP3</p>
</li>
<li>
<p>压缩属于编码吗？</p>
<ul>
<li>编码五官方定义</li>
<li>压缩属于编码</li>
</ul>
</li>
<li>
<p>媒体数据的编码解码</p>
<ul>
<li>图片的编码：把图像数据写成JPG，PNG，等文件的编码格式</li>
<li>图片的解码：把JPG,PNG等文件的数据解析为标准的图像数据</li>
</ul>
<h2 id="序列化">序列化</h2>
<ul>
<li>把数据对象（一般为内存中的，例如JVM对象）转换为字节序列的过程</li>
<li>目的：让内存中的对象可以被存储和传输</li>
</ul>
<h2 id="hash">Hash</h2>
<ul>
<li>把任意数据转化为指定大小范围（通常很小的计算）</li>
<li>作用:摘要，数字指纹</li>
<li>经典算法：MD5，SHA1，SH256等等</li>
<li>实际用途：数据完整性验证，快速查找：hashCode()和HashMap（）</li>
</ul>
</li>
</ul>
<h2 id="登录和授权">登录和授权</h2>
<ul>
<li>Cookie</li>
<li>Authorization</li>
</ul>
<h2 id="cookie">Cookie</h2>
<ul>
<li>
<p>起源：购物车</p>
</li>
<li>
<p>工作机制：</p>
<ol>
<li>客户端-----&gt;服务器<br>
Post/cart HTTP/1.1<br>
Host：shop.com<br>
Cookie:cart=&quot;apple=1 &quot; banana=1</li>
<li>服务器----&gt;客户端<br>
HTTP/1.1 200 ok<br>
set-Cookie：Cart=”apple=1&amp;banana=1“</li>
<li>客户端<br>
shop.com:<br>
cart:&quot;apple=1&amp;banana=1&quot;</li>
</ol>
</li>
<li>
<p>Cookie的作用：</p>
<ul>
<li>会话管理：购物车，登录状态等等</li>
<li>使用Cookie管理登录状态</li>
<li>个性化</li>
<li>分析用户行为</li>
</ul>
</li>
<li>
<p>Xss(cross-site scrpting):HTTP only 跨站脚本攻击</p>
<ul>
<li>Set-Cookie：Sessionid=123；Http Only 使Cookie对本地脚本不可见</li>
</ul>
</li>
<li>
<p>XSRF（cross-site request forgery ）：Referer：跨站请求伪造<br>
利用之前登录留下的Cookie实现无登录转账</p>
</li>
</ul>
<h2 id="authorization">Authorization</h2>
<ul>
<li>Authorization: Basic<code>&lt;Username：passwor(base64)&gt;</code></li>
<li>Authorization: Bearer<code>&lt;bearer token&gt;</code>
<ul>
<li>OAuth2</li>
<li>微信登录</li>
</ul>
</li>
</ul>
<h2 id="tcpip协议簇">TCP/IP协议簇</h2>
<ul>
<li>一系列模型组成的网络模型分层</li>
<li>为什么要分层：因为网络不稳定</li>
<li>具体分层：
<ul>
<li>应用层：HTTP，FTP，DNS</li>
<li>传输层：TCP，UDP</li>
<li>网络层：IP</li>
<li>数据链路层：以太网，WIFI</li>
</ul>
</li>
<li>TCP连接
<ul>
<li>三次握手...</li>
</ul>
</li>
<li>长连接：
<ul>
<li>实现方式：心跳<br>
在类小区网络环境下，防止长时间不连接端口关闭</li>
</ul>
</li>
</ul>
<h1 id="https">HTTPS</h1>
<ul>
<li>HTTP OVER SSL</li>
<li>SSL：Secure Socket Layer====&gt;TLS：Transport Layer Secure</li>
<li>定义：在HTTP下增加一个安全层，用于保障HTTP的加密传输</li>
<li>本质：在客户端和服务器之间协商出一套对称密钥，每次发送信息之间将内容加密，收到之后在进行解密，达到内容加密传输</li>
</ul>
<h2 id="http-连接">HTTP 连接</h2>
<ol>
<li>客户端请求建立TLS连接</li>
<li>服务器发回证明</li>
<li>客户端验证服务器证书</li>
<li>客户端信任服务器之后，和服务器协商对称密钥</li>
<li>使用对称密钥开始通信</li>
</ol>
<h1 id="在android中使用">在Android中使用</h1>
<ul>
<li>正常情况下，直接使用</li>
<li>什么时候不行：
<ul>
<li>用的自签名证书（例如用于内网的Https）</li>
<li>证书信息补全，缺乏证书机构信息</li>
<li>手机操作系统较旧，没有安装新加入的根证书</li>
</ul>
</li>
<li>如何处理：
<ul>
<li>手写验证过程</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP 学习笔记1]]></title>
        <id>https://yangspica27.github.io/post/http-xue-xi-bi-ji/</id>
        <link href="https://yangspica27.github.io/post/http-xue-xi-bi-ji/">
        </link>
        <updated>2020-02-11T05:27:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="http">HTTP</h1>
<ul>
<li>HyperText Transfer Portocol 超文本传输协议
<ul>
<li>超文本：在电脑中，显示的含有可以指向其他文本链接的文本</li>
</ul>
</li>
</ul>
<h2 id="http的工作方式">HTTP的工作方式</h2>
<ul>
<li>
<p><strong>浏览器</strong>--&gt;发送请求--&gt;<strong>服务器</strong><br>
GET/HTTP/1.1<br>
Host：····.com</p>
</li>
<li>
<p><strong>服务器</strong>--&gt;响应--&gt;<strong>浏览器</strong><br>
HTTP/1.1 200 OK<br>
Server：nginx/1.13.1<br>
Date：Sun，0，...</p>
</li>
</ul>
<h2 id="url-http报文">URL---&gt;HTTP报文</h2>
<ul>
<li>示例：http://space.bilibili.comsp/56285643<br>
<strong>https:</strong> 协议类型<br>
<strong>space.bilibili.com</strong>：服务器地址<br>
<strong>56285643：</strong> 路径<br>
↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</li>
<li>GET/56285643 HTTP/1.1<br>
Host:space.bilibili.comsp</li>
</ul>
<ul>
<li>报文格式：Request<pre><code class="language-xml">  GET/Users HTTP？1.1 //请求行
  Host:api.githu.com                 //headers    
  Content-Type: text/plain           //headers    
  Content-Length:243                //headers   
  ...                                       //body
</code></pre>
</li>
<li>报文格式：Response</li>
</ul>
<pre><code class="language-xml">HTTP/1.1 200 OK //状态行
//请求头
Content-type：application/json；charset=UTF-8 //headers
Cache-control：public，max-age=60，S-maxage=60
vary：Accept，Accept-Encoding
etag：w/“02eec5b33460”
Content-encoding:g-zip
//Body
[{
    .......
}]
</code></pre>
<h2 id="request-methods">Request Methods</h2>
<ul>
<li><strong>Get</strong><br>
获取资源，无Body</li>
<li>Post<br>
增加或者修改资源；Body</li>
<li><strong>Put</strong><br>
修改资源；有Body</li>
<li><strong>DELETE</strong><br>
删除资源；无Body</li>
<li>HEAD<br>
获取信息；如下载文件的大小；服务器不返回Body<br>
<strong>Get/Put/DELETE具有幂等性</strong></li>
</ul>
<h2 id="status-code-状态码">Status Code 状态码</h2>
<ul>
<li>1xx: 临时性消息<br>
101：支持HTTP2.0<br>
100：未完成</li>
<li>2XX：成功</li>
<li>3XX：重定向<br>
301：永久迁移<br>
302：临时迁移<br>
304：内容无改变</li>
<li>4XX：客户端错误</li>
<li>5XX：服务器错误</li>
</ul>
<h2 id="header-请求头">Header 请求头</h2>
<ul>
<li>
<p>作用：HTTP消息的<strong>元数据</strong>（metadata）</p>
<ul>
<li>Host:服务器的主机地址   虚拟主机</li>
<li>Content-Type/Content-Length： Body的类型/长度
<ul>
<li>Content-Length：内容的长度(字节)</li>
<li>Content-Type：
<ul>
<li>text/html：HTML内容，用于浏览器页面响应</li>
<li>application/x-www-form-urlencoded：普通表单</li>
<li>encoded：URL模式</li>
</ul>
</li>
</ul>
</li>
<li>multipart/form-data：多部分形式；包含二进制的多内容</li>
<li>application/json：json形式，用于Web Api的响应或者Post/Put请求</li>
<li>image/jpeg/application/zip...：单文件，用于Web API响应或者put/post请求</li>
</ul>
<h2 id="chunked-transfer-encoding">Chunked Transfer Encoding</h2>
</li>
</ul>
<ul>
<li>
<p>Transfer-Encoding：chunked<br>
表示Body长度无法确定，Content-Length不能使用<br>
Body格式：<br>
<length><br>
<data1><br>
<length2><br>
<date2><br>
......<br>
0<br>
<strong>0加换行</strong></p>
<p>最后传输0表示内容结束</p>
</li>
<li>
<p>Location:重定向的目标URL</p>
</li>
<li>
<p>User-Agent:用户代理</p>
</li>
<li>
<p>Range/Accept-Range：指定Body内容范围</p>
</li>
<li>
<p>Cookie/Set-Cookie：发送/设置 Cookie</p>
</li>
<li>
<p>Authorization:授权信息</p>
</li>
<li>
<p>Accept：客户端可接受的数据类型：如text/html</p>
</li>
<li>
<p>Accept-charset：客户端接收的字符集：如 UTF-8</p>
</li>
<li>
<p>Accept-Encoding：客户端接收的压缩类型编码。如gzip</p>
</li>
<li>
<p>Conetent-Encoding：压缩类型：如gzip</p>
</li>
</ul>
<h2 id="cache-缓存">Cache 缓存</h2>
<ul>
<li>Cache和Butter的区别？</li>
<li>Cache-Control：
<ul>
<li>no-cache： 缓存，使用前询问</li>
<li>no-store：不缓存</li>
<li>max-age：指定日期</li>
</ul>
</li>
<li>Last-Modified：
<ul>
<li>If-Modified-since</li>
</ul>
</li>
<li>ETag：  If-None-Match</li>
<li>Cache-Control：private/public  个性信息/公共信息</li>
</ul>
<p>##REST</p>
<ul>
<li>什么是<strong>REST</strong>：<br>
一种架构风格对HTTP加以限制</li>
<li>Sever-Client architecture     CS架构</li>
<li>StateLessness     无状态</li>
<li>Cacheablility     可缓存</li>
<li>Layered System 分层的服务器集群对客户端透明</li>
<li>Code on demand 服务器返回包含可执行代码</li>
<li>Uniform interface
<ul>
<li>Resource identication in requests</li>
<li>Resource manipulation through representation</li>
<li>self-descriptive messages</li>
<li>Hypermedia as engine of application state（HATEOAS）</li>
</ul>
</li>
</ul>
<h2 id="restful-http">RESTFUL HTTP</h2>
<ul>
<li>正确的使用Http</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何自定义一个简单的自动换行的TagLayout布局]]></title>
        <id>https://yangspica27.github.io/post/ru-he-zi-ding-yi-yi-ge-jian-dan-de-zi-dong-huan-xing-de-taglayout-bu-ju/</id>
        <link href="https://yangspica27.github.io/post/ru-he-zi-ding-yi-yi-ge-jian-dan-de-zi-dong-huan-xing-de-taglayout-bu-ju/">
        </link>
        <updated>2020-02-10T13:21:11.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://yangspica27.github.io//post-images/1581341006296.png" alt="" loading="lazy"></figure>
<h1 id="先上完整代码">先上完整代码：</h1>
<pre><code class="language-java">public class TagLayout extends ViewGroup {

  List&lt;Rect&gt; childrenBounds = new ArrayList&lt;&gt;();

  public TagLayout(Context context, AttributeSet attrs) {
    super(context, attrs);
  }

  @Override
  protected void onLayout(boolean changed, int l, int t, int r, int b) {
    for (int i = 0; i &lt; getChildCount(); i++) {
      View child = getChildAt(i);
      Rect childBound = childrenBounds.get(i);
      child.layout(childBound.left, childBound.top, childBound.right, childBound.bottom);
    }
  }

  @Override
  protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    super.onMeasure(widthMeasureSpec, heightMeasureSpec);

    int lineMaxWidth = 0;
    int heightUse = 0;
    int widthUse = 0;
    int lineMaxHeight = 0;

    int specMode=MeasureSpec.getMode(widthMeasureSpec);

    int specWidth = MeasureSpec.getSize(widthMeasureSpec);

    for (int i = 0; i &lt; getChildCount(); i++) {
      View child = getChildAt(i);

      measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, heightUse);

      if (specMode!=MeasureSpec.UNSPECIFIED&amp;&amp;widthUse + child.getMeasuredWidth() &gt; specWidth) {
        // 另起一行
        widthUse = 0;
        heightUse += lineMaxHeight;
        lineMaxHeight=0;
        measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, heightUse);
      }

      Rect childBound;
      if (childrenBounds.size() &lt;= i) {
        childBound = new Rect();
        childrenBounds.add(childBound);
      } else {
        childBound = childrenBounds.get(i);
      }

      childBound.set(
          widthUse,
          heightUse,
          widthUse + getMeasuredWidth(),
          heightUse + getMeasuredHeight());

      widthUse += child.getMeasuredWidth();
      lineMaxWidth = Math.max(lineMaxWidth, widthUse);
      lineMaxHeight = Math.max(lineMaxHeight, child.getMeasuredHeight());
    }

    int width = lineMaxWidth;
    int height = lineMaxHeight+heightUse;
    setMeasuredDimension(width, height);
  }

  @Override
  public LayoutParams generateLayoutParams(AttributeSet attrs) {
    return new MarginLayoutParams(getContext(), attrs);
  }
}


</code></pre>
<h2 id="准备工作">准备工作</h2>
<p>定义一个容器来存储子View的位置信息：</p>
<pre><code class="language-java">  List&lt;Rect&gt; childrenBounds = new ArrayList&lt;&gt;();
</code></pre>
<h2 id="先从onmeasure阶段开始">先从onMeasure（）阶段开始</h2>
<h3 id="定义了四个量">定义了四个量：</h3>
<pre><code class="language-java">    int widthUse = 0;//使用了多少宽度
    int heightUse = 0;//使用了多少高度
    int lineMaxWidth = 0; //当前最大宽度
    int lineMaxHeight = 0;//当前最大高度
</code></pre>
<p>这个布局是个横向排列的过程，我们用一个<code>widthUse</code>来记录当前行横向使用的宽度，则计算下个子View位置时候，只需在此基础上累加即可。<br>
而<code>lineMaxHeight</code>用来记录当前行的子View中的最大高度，当换行时候传递给<code>heightUse</code>，使下一阶段的子View添加下沉高度。</p>
<h3 id="这段代码是什么意义">这段代码是什么意义：</h3>
<pre><code class="language-java">   measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, heightUse);
</code></pre>
<p>这其实是安卓帮我们做了一个自动计算的过程：</p>
<pre><code class="language-java">    LayoutParams layoutParams = child.getLayoutParams();

      int specWidthMode = MeasureSpec.getMode(widthMeasureSpec);
      int specWidthSize = MeasureSpec.getSize(widthMeasureSpec);

      int childWidthMode;
      int childWidthSize;

      switch (layoutParams.width) {
        case LayoutParams.MATCH_PARENT:
          switch (specWidthMode) {
            case MeasureSpec.EXACTLY:
            case MeasureSpec.AT_MOST:
              childWidthMode = MeasureSpec.EXACTLY;
              childWidthSize = specWidthSize - useWidth;
              break;
            case MeasureSpec.UNSPECIFIED:
              childWidthMode = MeasureSpec.UNSPECIFIED;
              childWidthSize = 0;
              break;
          }
          break;
        case LayoutParams.WRAP_CONTENT:
          break;
      }
</code></pre>
<p>可以类比为如上的代码，根据开发者传入的参数类型进行数值的自动适配</p>
<h2 id="onlayout阶段">onLayout()阶段</h2>
<p>循环设置布局参数</p>
<pre><code class="language-java">    for (int i = 0; i &lt; getChildCount(); i++) {
      View child = getChildAt(i);
      Rect childBound = childrenBounds.get(i);
      child.layout(childBound.left, childBound.top, childBound.right, childBound.bottom);
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ resolveSize()的使用]]></title>
        <id>https://yangspica27.github.io/post/resolvesizede-shi-yong/</id>
        <link href="https://yangspica27.github.io/post/resolvesizede-shi-yong/">
        </link>
        <updated>2020-02-10T11:45:59.000Z</updated>
        <content type="html"><![CDATA[<p>绘制自定义View的时候，<code>onMeasure</code>阶段需要根据类型来决定宽高（外部自定义或者有最大宽高），由此需要对内部参数进行改变，所以常常要写这种代码：</p>
<pre><code class="language-java"> switch (specMode) {
            case MeasureSpec.AT_MOST:
        //.....
                break;
            case MeasureSpec.EXACTLY:
      //....
            case MeasureSpec.UNSPECIFIED:
 }
</code></pre>
<p>但Android已经进行了封装，我们只需要调用<code>resolveSize(内部设定的数值，Measure的原始值)</code>就可以自动为我们选择合适的值。</p>
]]></content>
    </entry>
</feed>